<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SMART_S9.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SMART_S9.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Feb 24 20:54:33 2024
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Hardware_Init &rArr; sys_init_app &rArr; module_init &rArr; tinyfs_init &rArr; nodes_info_load &rArr; nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e7]">adv_data_pack</a>
 <LI><a href="#[e9]">ancc_cmp_evt_send</a>
 <LI><a href="#[ef]">ancc_enable_rsp_send</a>
 <LI><a href="#[1cb]">anpc_prf_itf_get</a>
 <LI><a href="#[1cc]">anps_prf_itf_get</a>
 <LI><a href="#[f3]">app_hid_send_keyboard_report</a>
 <LI><a href="#[89]">app_init</a>
 <LI><a href="#[126]">bas_batt_lvl_update</a>
 <LI><a href="#[1be]">basc_prf_itf_get</a>
 <LI><a href="#[129]">bass_exe_operation</a>
 <LI><a href="#[12c]">bass_get_att_handle</a>
 <LI><a href="#[12d]">bass_get_att_idx</a>
 <LI><a href="#[4f]">bass_prf_itf_get</a>
 <LI><a href="#[168]">bass_prf_itf_set</a>
 <LI><a href="#[132]">bass_task_init</a>
 <LI><a href="#[1d6]">bcsc_prf_itf_get</a>
 <LI><a href="#[1d5]">bcss_prf_itf_get</a>
 <LI><a href="#[133]">bd_addr_cmp</a>
 <LI><a href="#[135]">ble_init</a>
 <LI><a href="#[13c]">ble_isr</a>
 <LI><a href="#[140]">ble_radio_reg_config</a>
 <LI><a href="#[13f]">ble_reg_restore</a>
 <LI><a href="#[146]">ble_reg_store</a>
 <LI><a href="#[141]">ble_sched</a>
 <LI><a href="#[5d]">ble_sleep</a>
 <LI><a href="#[147]">ble_storage_alloc_peer_id</a>
 <LI><a href="#[149]">ble_storage_bonding_info_search_req</a>
 <LI><a href="#[11f]">ble_storage_gapm_addr_solved_ind_handler</a>
 <LI><a href="#[11b]">ble_storage_gapm_resolv_addr_cmp</a>
 <LI><a href="#[35d]">ble_storage_max_num_init</a>
 <LI><a href="#[14b]">ble_storage_read_bonding_info</a>
 <LI><a href="#[14c]">ble_storage_read_peer_client_info</a>
 <LI><a href="#[14d]">ble_storage_read_peer_server_info</a>
 <LI><a href="#[14e]">ble_storage_valid_peer_init</a>
 <LI><a href="#[150]">ble_storage_write_bonding_info</a>
 <LI><a href="#[1b3]">blpc_prf_itf_get</a>
 <LI><a href="#[1b2]">blps_prf_itf_get</a>
 <LI><a href="#[13b]">builtin_task_init</a>
 <LI><a href="#[155]">builtin_timer_create</a>
 <LI><a href="#[330]">builtin_timer_env_register</a>
 <LI><a href="#[154]">builtin_timer_handler</a>
 <LI><a href="#[158]">builtin_timer_start</a>
 <LI><a href="#[1de]">cgmc_prf_itf_get</a>
 <LI><a href="#[1dd]">cgms_prf_itf_get</a>
 <LI><a href="#[15b]">con_rssi_thld_init</a>
 <LI><a href="#[1c7]">cppc_prf_itf_get</a>
 <LI><a href="#[1c8]">cpps_prf_itf_get</a>
 <LI><a href="#[1c5]">cscpc_prf_itf_get</a>
 <LI><a href="#[1c6]">cscps_prf_itf_get</a>
 <LI><a href="#[15d]">dev_manager_add_service</a>
 <LI><a href="#[15e]">dev_manager_add_service_with_start_handle</a>
 <LI><a href="#[160]">dev_manager_create_legacy_adv_object</a>
 <LI><a href="#[120]">dev_manager_gapm_activity_created_ind_handler</a>
 <LI><a href="#[121]">dev_manager_gapm_activity_stopped_ind_handler</a>
 <LI><a href="#[117]">dev_manager_gapm_create_activity_cmp</a>
 <LI><a href="#[11a]">dev_manager_gapm_delete_activity_cmp</a>
 <LI><a href="#[122]">dev_manager_gapm_ext_adv_report_ind_handler</a>
 <LI><a href="#[11e]">dev_manager_gapm_profile_added_ind_handler</a>
 <LI><a href="#[161]">dev_manager_gapm_profile_task_add_cmd_send</a>
 <LI><a href="#[114]">dev_manager_gapm_reset_cmp</a>
 <LI><a href="#[123]">dev_manager_gapm_scan_request_ind_handler</a>
 <LI><a href="#[11c]">dev_manager_gapm_set_adv_data_cmp</a>
 <LI><a href="#[116]">dev_manager_gapm_set_dev_config_cmp</a>
 <LI><a href="#[11d]">dev_manager_gapm_set_scan_rsp_data_cmp</a>
 <LI><a href="#[118]">dev_manager_gapm_start_activity_cmp</a>
 <LI><a href="#[119]">dev_manager_gapm_stop_activity_cmp</a>
 <LI><a href="#[124]">dev_manager_gattm_add_svc_rsp_handler</a>
 <LI><a href="#[164]">dev_manager_get_identity_bdaddr</a>
 <LI><a href="#[165]">dev_manager_init</a>
 <LI><a href="#[167]">dev_manager_prf_bass_server_add</a>
 <LI><a href="#[169]">dev_manager_prf_hid_server_add</a>
 <LI><a href="#[16b]">dev_manager_set_mac_addr</a>
 <LI><a href="#[16c]">dev_manager_stack_init</a>
 <LI><a href="#[16d]">dev_manager_start_adv</a>
 <LI><a href="#[1b1]">disc_prf_itf_get</a>
 <LI><a href="#[194]">diss_handle_to_value</a>
 <LI><a href="#[1d2]">envc_prf_itf_get</a>
 <LI><a href="#[1d1]">envs_prf_itf_get</a>
 <LI><a href="#[1b8]">findl_prf_itf_get</a>
 <LI><a href="#[1b9]">findt_prf_itf_get</a>
 <LI><a href="#[16f]">func_post</a>
 <LI><a href="#[170]">fw_digest_check</a>
 <LI><a href="#[175]">gap_manager_disconnect</a>
 <LI><a href="#[100]">gap_manager_gapc_bond_ind_handler</a>
 <LI><a href="#[ff]">gap_manager_gapc_bond_req_ind_handler</a>
 <LI><a href="#[fc]">gap_manager_gapc_cmp_evt_handler</a>
 <LI><a href="#[fd]">gap_manager_gapc_conn_req_ind_handler</a>
 <LI><a href="#[fe]">gap_manager_gapc_disconnect_ind_handler</a>
 <LI><a href="#[102]">gap_manager_gapc_encrypt_ind_handler</a>
 <LI><a href="#[101]">gap_manager_gapc_encrypt_req_ind_handler</a>
 <LI><a href="#[106]">gap_manager_gapc_get_dev_info_req_ind_handler</a>
 <LI><a href="#[107]">gap_manager_gapc_get_rssi_ind_handler</a>
 <LI><a href="#[fb]">gap_manager_gapc_le_phy_ind_handler</a>
 <LI><a href="#[104]">gap_manager_gapc_param_update_req_ind_handler</a>
 <LI><a href="#[105]">gap_manager_gapc_param_updated_ind_handler</a>
 <LI><a href="#[103]">gap_manager_gapc_security_ind_handler</a>
 <LI><a href="#[17d]">gap_manager_get_peer_addr</a>
 <LI><a href="#[17f]">gap_manager_init</a>
 <LI><a href="#[181]">gap_manager_passkey_input</a>
 <LI><a href="#[182]">gap_manager_set_pkt_size</a>
 <LI><a href="#[178]">gap_manager_slave_pair_response_send</a>
 <LI><a href="#[183]">gap_manager_tk_set</a>
 <LI><a href="#[113]">gatt_manager_gattc_att_info_req_ind_handler</a>
 <LI><a href="#[108]">gatt_manager_gattc_cmp_evt_handler</a>
 <LI><a href="#[10d]">gatt_manager_gattc_disc_char_desc_ind_handler</a>
 <LI><a href="#[10c]">gatt_manager_gattc_disc_char_ind_handler</a>
 <LI><a href="#[10b]">gatt_manager_gattc_disc_svc_incl_ind_handler</a>
 <LI><a href="#[10a]">gatt_manager_gattc_disc_svc_ind_handler</a>
 <LI><a href="#[10f]">gatt_manager_gattc_event_ind_handler</a>
 <LI><a href="#[110]">gatt_manager_gattc_event_req_ind_handler</a>
 <LI><a href="#[109]">gatt_manager_gattc_mtu_exchanged_ind_handler</a>
 <LI><a href="#[10e]">gatt_manager_gattc_read_ind_handler</a>
 <LI><a href="#[111]">gatt_manager_gattc_read_req_ind_handler</a>
 <LI><a href="#[112]">gatt_manager_gattc_write_req_ind_handler</a>
 <LI><a href="#[1fe]">gatt_manager_get_svc_att_handle</a>
 <LI><a href="#[188]">gatt_manager_init</a>
 <LI><a href="#[18a]">gatt_manager_server_read_req_reply</a>
 <LI><a href="#[18b]">gatt_manager_server_send_notification</a>
 <LI><a href="#[18d]">gatt_manager_svc_register</a>
 <LI><a href="#[1c1]">glpc_prf_itf_get</a>
 <LI><a href="#[1c2]">glps_prf_itf_get</a>
 <LI><a href="#[19c]">hid_ntf_cfg_init</a>
 <LI><a href="#[1bf]">hogpbh_prf_itf_get</a>
 <LI><a href="#[19e]">hogpd_get_att_handle</a>
 <LI><a href="#[18f]">hogpd_get_att_idx</a>
 <LI><a href="#[19b]">hogpd_ntf_cfg_ind_send</a>
 <LI><a href="#[1a1]">hogpd_ntf_send</a>
 <LI><a href="#[51]">hogpd_prf_itf_get</a>
 <LI><a href="#[16a]">hogpd_prf_itf_set</a>
 <LI><a href="#[1a0]">hogpd_task_init</a>
 <LI><a href="#[1c0]">hogprh_prf_itf_get</a>
 <LI><a href="#[1b7]">hrpc_prf_itf_get</a>
 <LI><a href="#[1b6]">hrps_prf_itf_get</a>
 <LI><a href="#[1b0]">htpc_prf_itf_get</a>
 <LI><a href="#[1af]">htpt_prf_itf_get</a>
 <LI><a href="#[138]">ip_rf_init</a>
 <LI><a href="#[1d0]">ipsc_prf_itf_get</a>
 <LI><a href="#[1cf]">ipss_prf_itf_get</a>
 <LI><a href="#[1c9]">lanc_prf_itf_get</a>
 <LI><a href="#[1ca]">lans_prf_itf_get</a>
 <LI><a href="#[1a5]">mac_sleep_check</a>
 <LI><a href="#[4e]">nvds_del</a>
 <LI><a href="#[4c]">nvds_get</a>
 <LI><a href="#[137]">nvds_init</a>
 <LI><a href="#[4d]">nvds_put</a>
 <LI><a href="#[14f]">nvds_tag_exist</a>
 <LI><a href="#[f7]">nvds_write_through</a>
 <LI><a href="#[1cd]">paspc_prf_itf_get</a>
 <LI><a href="#[1ce]">pasps_prf_itf_get</a>
 <LI><a href="#[1dc]">plxc_prf_itf_get</a>
 <LI><a href="#[1db]">plxs_prf_itf_get</a>
 <LI><a href="#[50]">prf_bass_handler</a>
 <LI><a href="#[206]">prf_bass_server_callback_init</a>
 <LI><a href="#[35c]">prf_fn_init</a>
 <LI><a href="#[205]">prf_hid_server_callback_init</a>
 <LI><a href="#[52]">prf_hogpd_handler</a>
 <LI><a href="#[62]">prf_itf_get</a>
 <LI><a href="#[125]">prf_ls_sig_mesh_handler</a>
 <LI><a href="#[19a]">program_segment_to_flash</a>
 <LI><a href="#[1ba]">proxm_prf_itf_get</a>
 <LI><a href="#[1bb]">proxr_prf_itf_get</a>
 <LI><a href="#[1c3]">rscpc_prf_itf_get</a>
 <LI><a href="#[1c4]">rscps_prf_itf_get</a>
 <LI><a href="#[1bd]">scppc_prf_itf_get</a>
 <LI><a href="#[1bc]">scpps_prf_itf_get</a>
 <LI><a href="#[35b]">statck_buffer_init</a>
 <LI><a href="#[1b5]">tipc_prf_itf_get</a>
 <LI><a href="#[1b4]">tips_prf_itf_get</a>
 <LI><a href="#[1d8]">udsc_prf_itf_get</a>
 <LI><a href="#[1d7]">udss_prf_itf_get</a>
 <LI><a href="#[1da]">wptc_prf_itf_get</a>
 <LI><a href="#[1d9]">wpts_prf_itf_get</a>
 <LI><a href="#[1d4]">wscc_prf_itf_get</a>
 <LI><a href="#[1d3]">wscs_prf_itf_get</a>
 <LI><a href="#[b3]">builtin_func_invoke_handler</a>
 <LI><a href="#[b2]">builtin_dynamic_msg_handler</a>
 <LI><a href="#[a7]">app_msg_handler</a>
 <LI><a href="#[53]">bond_cfm_ltk_fill</a>
 <LI><a href="#[177]">pair_done_evt</a>
 <LI><a href="#[58]">bond_cfm_tk_fill</a>
 <LI><a href="#[179]">gapc_bond_cfm_send</a>
 <LI><a href="#[56]">bond_search_callback</a>
 <LI><a href="#[54]">bond_cfm_irk_fill</a>
 <LI><a href="#[55]">bond_cfm_csrk_fill</a>
 <LI><a href="#[57]">bond_cfm_pair_feat_fill</a>
 <LI><a href="#[17c]">passkey_set</a>
 <LI><a href="#[5a]">svc_read_req_callback</a>
 <LI><a href="#[186]">gattc_manager_uuidlen_internal_to_user</a>
 <LI><a href="#[5b]">svc_write_req_callback</a>
 <LI><a href="#[18c]">gattc_event_cmd_send</a>
 <LI><a href="#[187]">gatt_svc_list_walk_through.isra.0</a>
 <LI><a href="#[14a]">rpa_resolve_start</a>
 <LI><a href="#[59]">adv_actv_start_param</a>
 <LI><a href="#[15f]">dev_manager_create_adv_object</a>
 <LI><a href="#[184]">gapm_activity_start_cmd_send</a>
 <LI><a href="#[162]">gapm_adv_activity_start_cmd_send</a>
 <LI><a href="#[193]">gattc_read_req_ind_handler</a>
 <LI><a href="#[16e]">fotas_gattc_send_evt_cmd.constprop.0</a>
 <LI><a href="#[197]">gattc_write_req_ind_handler</a>
 <LI><a href="#[195]">gattc_read_req_ind_handler</a>
 <LI><a href="#[bc]">gattc_att_info_req_ind_handler</a>
 <LI><a href="#[be]">gattc_read_req_ind_handler</a>
 <LI><a href="#[bd]">gattc_write_req_ind_handler</a>
 <LI><a href="#[bb]">hogpd_proto_mode_cfm_handler</a>
 <LI><a href="#[ba]">hogpd_report_cfm_handler</a>
 <LI><a href="#[b8]">hogpd_enable_req_handler</a>
 <LI><a href="#[b9]">hogpd_report_upd_req_handler</a>
 <LI><a href="#[bf]">gattc_cmp_evt_handler</a>
 <LI><a href="#[b6]">hogpd_create</a>
 <LI><a href="#[b7]">hogpd_cleanup</a>
 <LI><a href="#[b5]">hogpd_destroy</a>
 <LI><a href="#[b4]">hogpd_init</a>
 <LI><a href="#[b1]">gattc_cmp_evt_handler</a>
 <LI><a href="#[b0]">gattc_read_req_ind_handler</a>
 <LI><a href="#[ae]">gattc_att_info_req_ind_handler</a>
 <LI><a href="#[af]">gattc_write_req_ind_handler</a>
 <LI><a href="#[ad]">bass_batt_level_upd_req_handler</a>
 <LI><a href="#[ac]">bass_enable_req_handler</a>
 <LI><a href="#[aa]">bass_create</a>
 <LI><a href="#[ab]">bass_cleanup</a>
 <LI><a href="#[a9]">bass_destroy</a>
 <LI><a href="#[a8]">bass_init</a>
 <LI><a href="#[12b]">bass_notify_batt_lvl</a>
 <LI><a href="#[190]">gattc_cmp_evt_handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[289]">arm_cm_delay_asm</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[289]">arm_cm_delay_asm</a><BR>
 <LI><a href="#[36d]">traverse_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36d]">traverse_tree</a><BR>
 <LI><a href="#[2d9]">node_parent_fix</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">node_parent_fix</a><BR>
 <LI><a href="#[2d7]">dir_tree_link</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d7]">dir_tree_link</a><BR>
 <LI><a href="#[6]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6d]">ADC_Handler</a> from ls_msp_adc.o(i.ADC_Handler) referenced from ls_msp_adc.o(i.HAL_ADC_MSP_Init)
 <LI><a href="#[73]">ADTIM1_Handler</a> from ls_msp_timer.o(i.ADTIM1_Handler) referenced from ls_msp_timer.o(i.HAL_TIM_MSP_Init)
 <LI><a href="#[4b]">BLE_Handler</a> from platform.o(.xip_banned.BLE_Handler) referenced from libfw.o(.text.ble_init)
 <LI><a href="#[4a]">BLE_WKUP_Handler</a> from sleep.o(i.BLE_WKUP_Handler) referenced from libfw.o(.text.ble_init)
 <LI><a href="#[6f]">BSTIM1_Handler</a> from ls_msp_timer.o(i.BSTIM1_Handler) referenced from ls_msp_timer.o(i.HAL_TIM_MSP_Init)
 <LI><a href="#[10]">Bsp_Adc_Capture_Handler</a> from bsp_adc.o(i.Bsp_Adc_Capture_Handler) referenced from bsp_adc.o(.data)
 <LI><a href="#[f]">Bsp_Adc_Init</a> from bsp_adc.o(i.Bsp_Adc_Init) referenced from bsp_adc.o(.data)
 <LI><a href="#[13]">Bsp_BlueTooth_Init</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_Init) referenced from bsp_bluetooth.o(.data)
 <LI><a href="#[15]">Bsp_BlueTooth_Send_Notification</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_Send_Notification) referenced from bsp_bluetooth.o(.data)
 <LI><a href="#[14]">Bsp_BlueTooth_Start_adv</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_Start_adv) referenced from bsp_bluetooth.o(.data)
 <LI><a href="#[64]">Bsp_BlueTooth_dev_manager_CallBack</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_dev_manager_CallBack) referenced from bsp_bluetooth.o(i.Bsp_BlueTooth_Init)
 <LI><a href="#[65]">Bsp_BlueTooth_gap_manager_CallBack</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_gap_manager_CallBack) referenced from bsp_bluetooth.o(i.Bsp_BlueTooth_Init)
 <LI><a href="#[66]">Bsp_BlueTooth_gatt_manager_CallBack</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_gatt_manager_CallBack) referenced from bsp_bluetooth.o(i.Bsp_BlueTooth_Init)
 <LI><a href="#[67]">Bsp_BlueTooth_hid_con_rssi_judge</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_hid_con_rssi_judge) referenced from bsp_bluetooth.o(i.Bsp_BlueTooth_dev_manager_CallBack)
 <LI><a href="#[69]">Bsp_BlueTooth_prf_batt_server_CallBack</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_prf_batt_server_CallBack) referenced from bsp_bluetooth.o(i.Bsp_BlueTooth_prf_Added_Handler)
 <LI><a href="#[68]">Bsp_BlueTooth_prf_hid_server_CallBack</a> from bsp_bluetooth.o(i.Bsp_BlueTooth_prf_hid_server_CallBack) referenced from bsp_bluetooth.o(i.Bsp_BlueTooth_prf_Added_Handler)
 <LI><a href="#[19]">Bsp_Boot_Cmd_R_all_file_finish_Handler</a> from bsp_boot.o(i.Bsp_Boot_Cmd_R_all_file_finish_Handler) referenced from bsp_boot.o(.data)
 <LI><a href="#[1a]">Bsp_Boot_Cmd_R_change_firmware_Handler</a> from bsp_boot.o(i.Bsp_Boot_Cmd_R_change_firmware_Handler) referenced from bsp_boot.o(.data)
 <LI><a href="#[1c]">Bsp_Boot_Cmd_R_check_image_base_Handler</a> from bsp_boot.o(i.Bsp_Boot_Cmd_R_check_image_base_Handler) referenced from bsp_boot.o(.data)
 <LI><a href="#[1b]">Bsp_Boot_Cmd_R_check_keyboard_version_Handler</a> from bsp_boot.o(i.Bsp_Boot_Cmd_R_check_keyboard_version_Handler) referenced from bsp_boot.o(.data)
 <LI><a href="#[16]">Bsp_Boot_Cmd_R_start_update_Handler</a> from bsp_boot.o(i.Bsp_Boot_Cmd_R_start_update_Handler) referenced from bsp_boot.o(.data)
 <LI><a href="#[18]">Bsp_Boot_Cmd_R_update_file_Handler</a> from bsp_boot.o(i.Bsp_Boot_Cmd_R_update_file_Handler) referenced from bsp_boot.o(.data)
 <LI><a href="#[17]">Bsp_Boot_InfoGet</a> from bsp_boot.o(i.Bsp_Boot_InfoGet) referenced from bsp_boot.o(.data)
 <LI><a href="#[1d]">Bsp_Boot_JumpAppRun</a> from bsp_boot.o(i.Bsp_Boot_JumpAppRun) referenced from bsp_boot.o(.data)
 <LI><a href="#[1e]">Bsp_Boot_SysInfoGet</a> from bsp_boot.o(i.Bsp_Boot_SysInfoGet) referenced from bsp_boot.o(.data)
 <LI><a href="#[3a]">Bsp_Dog_FeedDog</a> from bsp_dog.o(i.Bsp_Dog_FeedDog) referenced from bsp_dog.o(.data)
 <LI><a href="#[39]">Bsp_Dog_Init</a> from bsp_dog.o(i.Bsp_Dog_Init) referenced from bsp_dog.o(.data)
 <LI><a href="#[20]">Bsp_Encoder_Control</a> from bsp_encoder.o(i.Bsp_Encoder_Control) referenced from bsp_encoder.o(.data)
 <LI><a href="#[1f]">Bsp_Encoder_Init</a> from bsp_encoder.o(i.Bsp_Encoder_Init) referenced from bsp_encoder.o(.data)
 <LI><a href="#[3b]">Bsp_Hid_DeviceSendData</a> from bsp_hid.o(i.Bsp_Hid_DeviceSendData) referenced from bsp_hid.o(.data)
 <LI><a href="#[3c]">Bsp_Hid_VolumeBtn_Control_Photo</a> from bsp_hid.o(i.Bsp_Hid_VolumeBtn_Control_Photo) referenced from bsp_hid.o(.data)
 <LI><a href="#[6b]">Bsp_KeyTimer_CallBack</a> from bsp_key.o(i.Bsp_KeyTimer_CallBack) referenced from bsp_key.o(i.Bsp_key_Timer_Init)
 <LI><a href="#[22]">Bsp_Key_IOExti_Handler</a> from bsp_key.o(i.Bsp_Key_IOExti_Handler) referenced from bsp_key.o(.data)
 <LI><a href="#[21]">Bsp_Key_Init</a> from bsp_key.o(i.Bsp_Key_Init) referenced from bsp_key.o(.data)
 <LI><a href="#[26]">Bsp_Led_All_Close</a> from bsp_led.o(i.Bsp_Led_All_Close) referenced from bsp_led.o(.data)
 <LI><a href="#[25]">Bsp_Led_BlinkConrol_Handler</a> from bsp_led.o(i.Bsp_Led_BlinkConrol_Handler) referenced from bsp_led.o(.data)
 <LI><a href="#[27]">Bsp_Led_Console_Mode_Display</a> from bsp_led.o(i.Bsp_Led_Console_Mode_Display) referenced from bsp_led.o(.data)
 <LI><a href="#[29]">Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler</a> from bsp_led.o(i.Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler) referenced from bsp_led.o(.data)
 <LI><a href="#[24]">Bsp_Led_Init</a> from bsp_led.o(i.Bsp_Led_Init) referenced from bsp_led.o(.data)
 <LI><a href="#[28]">Bsp_Led_StatusUpdate_Handler</a> from bsp_led.o(i.Bsp_Led_StatusUpdate_Handler) referenced from bsp_led.o(.data)
 <LI><a href="#[3e]">Bsp_NewProtocol_RxDataParse_Handler</a> from bsp_newprotocol.o(i.Bsp_NewProtocol_RxDataParse_Handler) referenced from bsp_newprotocol.o(.data)
 <LI><a href="#[3f]">Bsp_NewProtocol_SendPackage</a> from bsp_newprotocol.o(i.Bsp_NewProtocol_SendPackage) referenced from bsp_newprotocol.o(.data)
 <LI><a href="#[40]">Bsp_OldProtocol_RxDataParse_Handler</a> from bsp_oldprotocol.o(i.Bsp_OldProtocol_RxDataParse_Handler) referenced from bsp_oldprotocol.o(.data)
 <LI><a href="#[41]">Bsp_OldProtocol_SendPackage</a> from bsp_oldprotocol.o(i.Bsp_OldProtocol_SendPackage) referenced from bsp_oldprotocol.o(.data)
 <LI><a href="#[36]">Bsp_Power_BatteryUpdate_Handler</a> from bsp_power.o(i.Bsp_Power_BatteryUpdate_Handler) referenced from bsp_power.o(.data)
 <LI><a href="#[38]">Bsp_Power_Electric_Check_Handler</a> from bsp_power.o(i.Bsp_Power_Electric_Check_Handler) referenced from bsp_power.o(.data)
 <LI><a href="#[34]">Bsp_Power_IOExti_Close_AdcSampling</a> from bsp_power.o(i.Bsp_Power_IOExti_Close_AdcSampling) referenced from bsp_power.o(.data)
 <LI><a href="#[33]">Bsp_Power_Init</a> from bsp_power.o(i.Bsp_Power_Init) referenced from bsp_power.o(.data)
 <LI><a href="#[35]">Bsp_Power_StartingUp_Handler</a> from bsp_power.o(i.Bsp_Power_StartingUp_Handler) referenced from bsp_power.o(.data)
 <LI><a href="#[37]">Bsp_Power_shutdown_Handler</a> from bsp_power.o(i.Bsp_Power_shutdown_Handler) referenced from bsp_power.o(.data)
 <LI><a href="#[6a]">Bsp_SysTimer_CallBack</a> from bsp_systimer.o(i.Bsp_SysTimer_CallBack) referenced from bsp_systimer.o(i.Bsp_SysTimer_Init)
 <LI><a href="#[3d]">Bsp_SysTimer_Init</a> from bsp_systimer.o(i.Bsp_SysTimer_Init) referenced from bsp_systimer.o(.data)
 <LI><a href="#[2e]">Bsp_Uart_Ble_SendData</a> from bsp_uart.o(i.Bsp_Uart_Ble_SendData) referenced from bsp_uart.o(.data)
 <LI><a href="#[2a]">Bsp_Uart_Init</a> from bsp_uart.o(i.Bsp_Uart_Init) referenced from bsp_uart.o(.data)
 <LI><a href="#[32]">Bsp_Uart_ParameterInit</a> from bsp_uart.o(i.Bsp_Uart_ParameterInit) referenced from bsp_uart.o(.data)
 <LI><a href="#[31]">Bsp_Uart_RecData_AddPosition</a> from bsp_uart.o(i.Bsp_Uart_RecData_AddPosition) referenced from bsp_uart.o(.data)
 <LI><a href="#[30]">Bsp_Uart_RecData_Handler</a> from bsp_uart.o(i.Bsp_Uart_RecData_Handler) referenced from bsp_uart.o(.data)
 <LI><a href="#[2f]">Bsp_Uart_SendFinish_Handler</a> from bsp_uart.o(i.Bsp_Uart_SendFinish_Handler) referenced from bsp_uart.o(.data)
 <LI><a href="#[2b]">Bsp_Uart_SerialPort1_SendData</a> from bsp_uart.o(i.Bsp_Uart_SerialPort1_SendData) referenced from bsp_uart.o(.data)
 <LI><a href="#[2c]">Bsp_Uart_SerialPort2_SendData</a> from bsp_uart.o(i.Bsp_Uart_SerialPort2_SendData) referenced from bsp_uart.o(.data)
 <LI><a href="#[2d]">Bsp_Uart_SerialPort3_SendData</a> from bsp_uart.o(i.Bsp_Uart_SerialPort3_SendData) referenced from bsp_uart.o(.data)
 <LI><a href="#[23]">Bsp_key_Timer_Init</a> from bsp_key.o(i.Bsp_key_Timer_Init) referenced from bsp_key.o(.data)
 <LI><a href="#[6]">Default_Handler</a> from startup.o(.xip_banned) referenced 32 times from startup.o(RESET)
 <LI><a href="#[85]">EXTI_Handler</a> from ls_soc_gpio.o(i.EXTI_Handler) referenced from ls_soc_gpio.o(i.io_init)
 <LI><a href="#[70]">GPTIMA1_Handler</a> from ls_msp_timer.o(i.GPTIMA1_Handler) referenced from ls_msp_timer.o(i.HAL_TIM_MSP_Init)
 <LI><a href="#[71]">GPTIMB1_Handler</a> from ls_msp_timer.o(i.GPTIMB1_Handler) referenced from ls_msp_timer.o(i.HAL_TIM_MSP_Init)
 <LI><a href="#[72]">GPTIMC1_Handler</a> from ls_msp_timer.o(i.GPTIMC1_Handler) referenced from ls_msp_timer.o(i.HAL_TIM_MSP_Init)
 <LI><a href="#[8b]">GPTIM_IRQ_Handler_For_LSI_Counting</a> from platform.o(i.GPTIM_IRQ_Handler_For_LSI_Counting) referenced from platform.o(i.rco_freq_counting_init)
 <LI><a href="#[74]">HAL_TRNG_IRQHandler</a> from ls_hal_trng.o(i.HAL_TRNG_IRQHandler) referenced from ls_msp_trng.o(i.HAL_TRNG_MSP_Init)
 <LI><a href="#[75]">HAL_UART1_Handler</a> from ls_msp_uart.o(i.HAL_UART1_Handler) referenced from ls_msp_uart.o(i.HAL_UART_MSP_Init)
 <LI><a href="#[76]">HAL_UART2_Handler</a> from ls_msp_uart.o(i.HAL_UART2_Handler) referenced from ls_msp_uart.o(i.HAL_UART_MSP_Init)
 <LI><a href="#[77]">HAL_UART3_Handler</a> from ls_msp_uart.o(i.HAL_UART3_Handler) referenced from ls_msp_uart.o(i.HAL_UART_MSP_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.xip_banned) referenced from startup.o(RESET)
 <LI><a href="#[e]">Hardware_Init</a> from system_init.o(i.Hardware_Init) referenced from system_init.o(.data)
 <LI><a href="#[7c]">LPWKUP_Handler</a> from sleep.o(i.LPWKUP_Handler) referenced from platform.o(i.cpu_sleep_recover_init)
 <LI><a href="#[6e]">LSECC_IRQHandler</a> from ls_hal_ecc.o(i.LSECC_IRQHandler) referenced from ls_msp_ecc.o(i.HAL_LSECC_MSP_Init)
 <LI><a href="#[7a]">LVD33_Handler</a> from platform.o(.xip_banned.LVD33_Handler) referenced from platform.o(i.analog_init)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.xip_banned) referenced from startup.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup.o(.xip_banned) referenced from startup.o(RESET)
 <LI><a href="#[d]">Public_BufferInit</a> from public.o(i.Public_BufferInit) referenced from public.o(.data)
 <LI><a href="#[c]">Public_Delay_Ms</a> from public.o(i.Public_Delay_Ms) referenced from public.o(.data)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from svcall_asm.o(.text.SVC_Handler) referenced from startup.o(RESET)
 <LI><a href="#[49]">SVC_Handler_C</a> from svcall.o(i.SVC_Handler_C) referenced from svcall_asm.o(.text.SVC_Handler)
 <LI><a href="#[12]">Shutdown_Rocker_Check_Handler</a> from bsp_adc.o(i.Shutdown_Rocker_Check_Handler) referenced from bsp_adc.o(.data)
 <LI><a href="#[11]">Startup_Shutdown_Rocker_Check_Handler</a> from bsp_adc.o(i.Startup_Shutdown_Rocker_Check_Handler) referenced from bsp_adc.o(.data)
 <LI><a href="#[5]">SysTick_Handler</a> from systick.o(.xip_banned.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from platform.o(i.SystemInit) referenced from startup.o(.text)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[46]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[47]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[45]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[79]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[63]">adc_isenable_poll</a> from ls_hal_adc.o(i.adc_isenable_poll) referenced from ls_hal_adc.o(i.ADC_ConversionStop_Disable)
 <LI><a href="#[63]">adc_isenable_poll</a> from ls_hal_adc.o(i.adc_isenable_poll) referenced from ls_hal_adc.o(i.ADC_Enable)
 <LI><a href="#[59]">adv_actv_start_param</a> from libfw.o(.text.adv_actv_start_param) referenced from libfw.o(.text.gapm_adv_activity_start_cmd_send)
 <LI><a href="#[89]">app_init</a> from libfw.o(.text.app_init) referenced from stack_var.o(i.main_task_app_init)
 <LI><a href="#[a7]">app_msg_handler</a> from libfw.o(.text.app_msg_handler) referenced from libfw.o(.rodata.app_msg_handler_tab)
 <LI><a href="#[ad]">bass_batt_level_upd_req_handler</a> from libfw.o(.text.bass_batt_level_upd_req_handler) referenced from libfw.o(.rodata.bass_msg_handler_tab)
 <LI><a href="#[ab]">bass_cleanup</a> from libfw.o(.text.bass_cleanup) referenced from libfw.o(.rodata.bass_itf)
 <LI><a href="#[aa]">bass_create</a> from libfw.o(.text.bass_create) referenced from libfw.o(.rodata.bass_itf)
 <LI><a href="#[a9]">bass_destroy</a> from libfw.o(.text.bass_destroy) referenced from libfw.o(.rodata.bass_itf)
 <LI><a href="#[ac]">bass_enable_req_handler</a> from libfw.o(.text.bass_enable_req_handler) referenced from libfw.o(.rodata.bass_msg_handler_tab)
 <LI><a href="#[a8]">bass_init</a> from libfw.o(.text.bass_init) referenced from libfw.o(.rodata.bass_itf)
 <LI><a href="#[4f]">bass_prf_itf_get</a> from libfw.o(.text.bass_prf_itf_get) referenced from libfw.o(.text.dev_manager_prf_bass_server_add)
 <LI><a href="#[5d]">ble_sleep</a> from libfw.o(.text.ble_sleep) referenced from libfw.o(.text.ip_rf_init)
 <LI><a href="#[55]">bond_cfm_csrk_fill</a> from libfw.o(.text.bond_cfm_csrk_fill) referenced from libfw.o(.text.gap_manager_gapc_bond_req_ind_handler)
 <LI><a href="#[54]">bond_cfm_irk_fill</a> from libfw.o(.text.bond_cfm_irk_fill) referenced from libfw.o(.text.gap_manager_gapc_bond_req_ind_handler)
 <LI><a href="#[53]">bond_cfm_ltk_fill</a> from libfw.o(.text.bond_cfm_ltk_fill) referenced from libfw.o(.text.gap_manager_gapc_bond_req_ind_handler)
 <LI><a href="#[57]">bond_cfm_pair_feat_fill</a> from libfw.o(.text.bond_cfm_pair_feat_fill) referenced from libfw.o(.text.gap_manager_slave_pair_response_send)
 <LI><a href="#[58]">bond_cfm_tk_fill</a> from libfw.o(.text.bond_cfm_tk_fill) referenced from libfw.o(.text.gap_manager_tk_set)
 <LI><a href="#[56]">bond_search_callback</a> from libfw.o(.text.bond_search_callback) referenced from libfw.o(.text.gap_manager_gapc_conn_req_ind_handler)
 <LI><a href="#[b2]">builtin_dynamic_msg_handler</a> from libfw.o(.text.builtin_dynamic_msg_handler) referenced from libfw.o(.rodata.builtin_msg_handler_tab)
 <LI><a href="#[b3]">builtin_func_invoke_handler</a> from libfw.o(.text.builtin_func_invoke_handler) referenced from libfw.o(.rodata.builtin_msg_handler_tab)
 <LI><a href="#[7b]">cpu_recover_asm</a> from sleep_asm.o(.xip_banned.sleep_recover_asm) referenced from platform.o(i.cpu_sleep_recover_init)
 <LI><a href="#[99]">dir_add_parse</a> from tinyfs.o(i.dir_add_parse) referenced from tinyfs.o(.constdata)
 <LI><a href="#[7d]">dir_compare</a> from tinyfs.o(i.dir_compare) referenced from tinyfs.o(i.dir_add_parse)
 <LI><a href="#[7d]">dir_compare</a> from tinyfs.o(i.dir_compare) referenced from tinyfs.o(i.dir_remove_parse)
 <LI><a href="#[9b]">dir_remove_parse</a> from tinyfs.o(i.dir_remove_parse) referenced from tinyfs.o(.constdata)
 <LI><a href="#[a2]">do_hal_flash_chip_erase</a> from ls_hal_flash.o(i.do_hal_flash_chip_erase) referenced from svcall.o(.constdata)
 <LI><a href="#[7e]">do_hal_flash_chip_erase_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_chip_erase_func) referenced from ls_hal_flash.o(i.do_hal_flash_chip_erase)
 <LI><a href="#[a0]">do_hal_flash_erase</a> from ls_hal_flash.o(i.do_hal_flash_erase) referenced from svcall.o(.constdata)
 <LI><a href="#[7f]">do_hal_flash_erase_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_erase_func) referenced from ls_hal_flash.o(i.do_hal_flash_erase)
 <LI><a href="#[a3]">do_hal_flash_erase_security_area</a> from ls_hal_flash.o(i.do_hal_flash_erase_security_area) referenced from svcall.o(.constdata)
 <LI><a href="#[80]">do_hal_flash_erase_security_area_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_erase_security_area_func) referenced from ls_hal_flash.o(i.do_hal_flash_erase_security_area)
 <LI><a href="#[7]">do_hal_flash_prog_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_prog_func) referenced from ls_hal_flash.o(.xip_banned.flash_writing_critical)
 <LI><a href="#[7]">do_hal_flash_prog_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_prog_func) referenced from ls_hal_flash_qspi.o(i.do_hal_flash_program)
 <LI><a href="#[9f]">do_hal_flash_program</a> from ls_hal_flash_qspi.o(i.do_hal_flash_program) referenced from svcall.o(.constdata)
 <LI><a href="#[a4]">do_hal_flash_program_security_area</a> from ls_hal_flash_qspi.o(i.do_hal_flash_program_security_area) referenced from svcall.o(.constdata)
 <LI><a href="#[81]">do_hal_flash_program_security_area_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_program_security_area_func) referenced from ls_hal_flash_qspi.o(i.do_hal_flash_program_security_area)
 <LI><a href="#[a1]">do_hal_flash_read</a> from ls_hal_flash.o(i.do_hal_flash_read) referenced from svcall.o(.constdata)
 <LI><a href="#[82]">do_hal_flash_read_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_read_func) referenced from ls_hal_flash.o(i.do_hal_flash_read)
 <LI><a href="#[a6]">do_hal_flash_read_reg</a> from ls_hal_flash.o(i.do_hal_flash_read_reg) referenced from svcall.o(.constdata)
 <LI><a href="#[83]">do_hal_flash_read_reg_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_read_reg_func) referenced from ls_hal_flash.o(i.do_hal_flash_read_reg)
 <LI><a href="#[a5]">do_hal_flash_read_security_area</a> from ls_hal_flash_qspi.o(i.do_hal_flash_read_security_area) referenced from svcall.o(.constdata)
 <LI><a href="#[84]">do_hal_flash_read_security_area_func</a> from ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_read_security_area_func) referenced from ls_hal_flash_qspi.o(i.do_hal_flash_read_security_area)
 <LI><a href="#[8a]">dummy</a> from stack_var.o(i.dummy) referenced from stack_var.o(i.main_task_app_init)
 <LI><a href="#[8f]">ecc_calc_start</a> from platform.o(i.ecc_calc_start) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[92]">enter_critical</a> from cpu.o(.xip_banned.enter_critical) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[93]">exit_critical</a> from cpu.o(.xip_banned.exit_critical) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[78]">fputc</a> from log.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[78]">fputc</a> from log.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[ae]">gattc_att_info_req_ind_handler</a> from libfw.o(.text.gattc_att_info_req_ind_handler) referenced from libfw.o(.rodata.bass_msg_handler_tab)
 <LI><a href="#[bc]">gattc_att_info_req_ind_handler</a> from libfw.o(.text.gattc_att_info_req_ind_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[b1]">gattc_cmp_evt_handler</a> from libfw.o(.text.gattc_cmp_evt_handler) referenced from libfw.o(.rodata.bass_msg_handler_tab)
 <LI><a href="#[bf]">gattc_cmp_evt_handler</a> from libfw.o(.text.gattc_cmp_evt_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[b0]">gattc_read_req_ind_handler</a> from libfw.o(.text.gattc_read_req_ind_handler) referenced from libfw.o(.rodata.bass_msg_handler_tab)
 <LI><a href="#[be]">gattc_read_req_ind_handler</a> from libfw.o(.text.gattc_read_req_ind_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[af]">gattc_write_req_ind_handler</a> from libfw.o(.text.gattc_write_req_ind_handler) referenced from libfw.o(.rodata.bass_msg_handler_tab)
 <LI><a href="#[bd]">gattc_write_req_ind_handler</a> from libfw.o(.text.gattc_write_req_ind_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[9d]">hal_flash_quad_io_read</a> from ls_hal_flash_qspi.o(i.hal_flash_quad_io_read) referenced from tinyfs_nvm.o(.constdata)
 <LI><a href="#[9c]">hal_flash_quad_page_program</a> from ls_hal_flash.o(i.hal_flash_quad_page_program) referenced from tinyfs_nvm.o(.constdata)
 <LI><a href="#[9e]">hal_flash_sector_erase</a> from ls_hal_flash.o(i.hal_flash_sector_erase) referenced from tinyfs_nvm.o(.constdata)
 <LI><a href="#[b7]">hogpd_cleanup</a> from libfw.o(.text.hogpd_cleanup) referenced from libfw.o(.rodata.hogpd_itf)
 <LI><a href="#[b6]">hogpd_create</a> from libfw.o(.text.hogpd_create) referenced from libfw.o(.rodata.hogpd_itf)
 <LI><a href="#[b5]">hogpd_destroy</a> from libfw.o(.text.hogpd_destroy) referenced from libfw.o(.rodata.hogpd_itf)
 <LI><a href="#[b8]">hogpd_enable_req_handler</a> from libfw.o(.text.hogpd_enable_req_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[b4]">hogpd_init</a> from libfw.o(.text.hogpd_init) referenced from libfw.o(.rodata.hogpd_itf)
 <LI><a href="#[51]">hogpd_prf_itf_get</a> from libfw.o(.text.hogpd_prf_itf_get) referenced from libfw.o(.text.dev_manager_prf_hid_server_add)
 <LI><a href="#[bb]">hogpd_proto_mode_cfm_handler</a> from libfw.o(.text.hogpd_proto_mode_cfm_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[ba]">hogpd_report_cfm_handler</a> from libfw.o(.text.hogpd_report_cfm_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[b9]">hogpd_report_upd_req_handler</a> from libfw.o(.text.hogpd_report_upd_req_handler) referenced from libfw.o(.rodata.hogpd_msg_handler_tab)
 <LI><a href="#[91]">idiv_acc</a> from platform.o(i.idiv_acc) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[48]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[87]">log_hex_output</a> from log.o(i.log_hex_output) referenced from log.o(i.ls_log_init)
 <LI><a href="#[86]">log_output</a> from log.o(i.log_output) referenced from log.o(i.ls_log_init)
 <LI><a href="#[94]">lpcycles_to_hus</a> from platform.o(i.lpcycles_to_hus) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[88]">lsi_counting_timer_callback</a> from platform.o(i.lsi_counting_timer_callback) referenced from platform.o(i.lsi_counting_timer_create)
 <LI><a href="#[6c]">lsi_counting_timer_start</a> from platform.o(i.lsi_counting_timer_start) referenced from platform.o(i.GPTIM_IRQ_Handler_For_LSI_Counting)
 <LI><a href="#[96]">lsi_freq_update_and_hs_to_lpcycles</a> from platform.o(i.lsi_freq_update_and_hs_to_lpcycles) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4e]">nvds_del</a> from libfw.o(.text.nvds_del) referenced from libfw.o(.text.ble_init)
 <LI><a href="#[4c]">nvds_get</a> from libfw.o(.text.nvds_get) referenced from libfw.o(.text.ble_init)
 <LI><a href="#[4d]">nvds_put</a> from libfw.o(.text.nvds_put) referenced from libfw.o(.text.ble_init)
 <LI><a href="#[8e]">platform_reset</a> from platform.o(i.platform_reset) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[50]">prf_bass_handler</a> from libfw.o(.text.prf_bass_handler) referenced from libfw.o(.text.dev_manager_prf_bass_server_add)
 <LI><a href="#[52]">prf_hogpd_handler</a> from libfw.o(.text.prf_hogpd_handler) referenced from libfw.o(.text.dev_manager_prf_hid_server_add)
 <LI><a href="#[62]">prf_itf_get</a> from libfw.o(.text.prf_itf_get) referenced from libfw.o(.text.prf_fn_init)
 <LI><a href="#[90]">rand</a> from rand.o(.text) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[98]">record_add_parse</a> from tinyfs.o(i.record_add_parse) referenced from tinyfs.o(.constdata)
 <LI><a href="#[8c]">record_compare</a> from tinyfs.o(i.record_compare) referenced from tinyfs.o(i.record_add_parse)
 <LI><a href="#[8c]">record_compare</a> from tinyfs.o(i.record_compare) referenced from tinyfs.o(i.record_remove_parse)
 <LI><a href="#[9a]">record_remove_parse</a> from tinyfs.o(i.record_remove_parse) referenced from tinyfs.o(.constdata)
 <LI><a href="#[5f]">rf_force_agc_enable</a> from modem_rf_le501x.o(i.rf_force_agc_enable) referenced from libfw.o(.text.ip_rf_init)
 <LI><a href="#[97]">rf_reg_config</a> from modem_rf_le501x.o(i.rf_reg_config) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[5e]">rf_reset</a> from modem_rf_le501x.o(i.rf_reset) referenced from libfw.o(.text.ip_rf_init)
 <LI><a href="#[60]">rf_rssi_convert</a> from modem_rf_le501x.o(i.rf_rssi_convert) referenced from libfw.o(.text.ip_rf_init)
 <LI><a href="#[61]">rf_txpwr_cs_get</a> from modem_rf_le501x.o(i.rf_txpwr_cs_get) referenced from libfw.o(.text.ip_rf_init)
 <LI><a href="#[5c]">rf_txpwr_dbm_get</a> from modem_rf_le501x.o(i.rf_txpwr_dbm_get) referenced from libfw.o(.text.ip_rf_init)
 <LI><a href="#[8d]">stack_assert_asm</a> from stack_asm.o(.text.stack_assert_asm) referenced from stack_var.o(i.stack_var_ptr_init)
 <LI><a href="#[8]">stig_read_continue</a> from ls_hal_qspi.o(.xip_banned.stig_read_continue) referenced from ls_hal_qspi.o(.xip_banned.lsqspi_stig_read_data)
 <LI><a href="#[9]">stig_read_start</a> from ls_hal_qspi.o(.xip_banned.stig_read_start) referenced from ls_hal_qspi.o(.xip_banned.lsqspi_stig_read_data)
 <LI><a href="#[9]">stig_read_start</a> from ls_hal_qspi.o(.xip_banned.stig_read_start) referenced from ls_hal_qspi.o(.xip_banned.stig_rd_wr)
 <LI><a href="#[a]">stig_write_continue</a> from ls_hal_qspi.o(.xip_banned.stig_write_continue) referenced from ls_hal_qspi.o(.xip_banned.lsqspi_stig_write_data)
 <LI><a href="#[b]">stig_write_start</a> from ls_hal_qspi.o(.xip_banned.stig_write_start) referenced from ls_hal_qspi.o(.xip_banned.lsqspi_stig_write_data)
 <LI><a href="#[5a]">svc_read_req_callback</a> from libfw.o(.text.svc_read_req_callback) referenced from libfw.o(.text.gatt_manager_gattc_read_req_ind_handler)
 <LI><a href="#[5b]">svc_write_req_callback</a> from libfw.o(.text.svc_write_req_callback) referenced from libfw.o(.text.gatt_manager_gattc_write_req_ind_handler)
 <LI><a href="#[95]">us_to_lpcycles</a> from platform.o(i.us_to_lpcycles) referenced from stack_var.o(i.stack_var_ptr_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.xip_banned))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.xip_banned))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.xip_banned))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>BLE_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, platform.o(.xip_banned.BLE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = BLE_Handler &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_get
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_writing_busy
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_in_process
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_status_register_1
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_ram_assert
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_prog_erase_suspend
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_prog_erase_resume
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_isr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ble_init)
</UL>
<P><STRONG><a name="[7a]"></a>LVD33_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, platform.o(.xip_banned.LVD33_Handler))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.analog_init)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.xip_banned.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[382]"></a>after_wfi</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sleep.o(.xip_banned.after_wfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = after_wfi &rArr; clk_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_ram_assert
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_check
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_dpll_lock
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal_sleep_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPendingIRQ
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_on
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_recover_asm
</UL>

<P><STRONG><a name="[289]"></a>arm_cm_delay_asm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, delay_asm.o(.xip_banned.arm_cm_delay_asm))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Public_Delay_Ms (via Veneer)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_init (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[386]"></a>before_wfi</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sleep.o(.xip_banned.before_wfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = before_wfi &rArr; sleep_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_check
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_set
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hclk_clr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_xo16m
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
</UL>

<P><STRONG><a name="[2a4]"></a>clk_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, platform.o(.xip_banned.clk_check))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init (via Veneer)
</UL>

<P><STRONG><a name="[2a5]"></a>clk_switch</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, platform.o(.xip_banned.clk_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clk_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_pll
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init (via Veneer)
</UL>

<P><STRONG><a name="[2a3]"></a>dcdc_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(.xip_banned.dcdc_on))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init (via Veneer)
</UL>

<P><STRONG><a name="[320]"></a>disable_global_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.xip_banned.disable_global_irq))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert (via Veneer)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_ram_assert
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_assert_c (via Veneer)
</UL>

<P><STRONG><a name="[7e]"></a>do_hal_flash_chip_erase_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_chip_erase_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_hal_flash_chip_erase_func &rArr; lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash.o(i.do_hal_flash_chip_erase)
</UL>
<P><STRONG><a name="[7f]"></a>do_hal_flash_erase_func</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_erase_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = do_hal_flash_erase_func &rArr; lsqspi_stig_write_register &rArr; lsqspi_stig_write_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash.o(i.do_hal_flash_erase)
</UL>
<P><STRONG><a name="[80]"></a>do_hal_flash_erase_security_area_func</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_erase_security_area_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = do_hal_flash_erase_security_area_func &rArr; lsqspi_stig_write_register &rArr; lsqspi_stig_write_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash.o(i.do_hal_flash_erase_security_area)
</UL>
<P><STRONG><a name="[7]"></a>do_hal_flash_prog_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_prog_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_hal_flash_prog_func &rArr; lsqspi_stig_write_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ls_hal_flash.o(.xip_banned.flash_writing_critical)
<LI> ls_hal_flash_qspi.o(i.do_hal_flash_program)
</UL>
<P><STRONG><a name="[81]"></a>do_hal_flash_program_security_area_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_program_security_area_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_hal_flash_program_security_area_func &rArr; lsqspi_stig_write_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash_qspi.o(i.do_hal_flash_program_security_area)
</UL>
<P><STRONG><a name="[82]"></a>do_hal_flash_read_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_read_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_hal_flash_read_func &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash.o(i.do_hal_flash_read)
</UL>
<P><STRONG><a name="[83]"></a>do_hal_flash_read_reg_func</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_read_reg_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = do_hal_flash_read_reg_func &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash.o(i.do_hal_flash_read_reg)
</UL>
<P><STRONG><a name="[84]"></a>do_hal_flash_read_security_area_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.do_hal_flash_read_security_area_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_hal_flash_read_security_area_func &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_flash_qspi.o(i.do_hal_flash_read_security_area)
</UL>
<P><STRONG><a name="[92]"></a>enter_critical</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(.xip_banned.enter_critical))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_rd_wr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idiv_acc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[93]"></a>exit_critical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.xip_banned.exit_critical))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_rd_wr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idiv_acc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[2dc]"></a>flash_reading_critical</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ls_hal_flash.o(.xip_banned.flash_reading_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_reg (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_security_area (via Veneer)
</UL>

<P><STRONG><a name="[2db]"></a>flash_writing_critical</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ls_hal_flash.o(.xip_banned.flash_writing_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_poll_timeout
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_enable
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_status_check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_erase_security_area (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_erase (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_chip_erase (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_program_security_area (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_program (via Veneer)
</UL>

<P><STRONG><a name="[38a]"></a>hal_flash_deep_power_down</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_deep_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_deep_power_down &rArr; lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
</UL>

<P><STRONG><a name="[376]"></a>hal_flash_drv_var_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ls_hal_flash.o(.xip_banned.hal_flash_drv_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_drv_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_set
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_writing_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init (via Veneer)
</UL>

<P><STRONG><a name="[300]"></a>hal_flash_dual_mode_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ls_hal_flash.o(.xip_banned.hal_flash_dual_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_read (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_page_program (via Veneer)
</UL>

<P><STRONG><a name="[38e]"></a>hal_flash_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_init &rArr; lsqspi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
</UL>

<P><STRONG><a name="[381]"></a>hal_flash_prog_erase_resume</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_prog_erase_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_prog_erase_resume &rArr; lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[37c]"></a>hal_flash_prog_erase_suspend</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_prog_erase_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_prog_erase_suspend &rArr; lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[39a]"></a>hal_flash_read_status_register_0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_read_status_register_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_in_process
</UL>

<P><STRONG><a name="[37d]"></a>hal_flash_read_status_register_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_read_status_register_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flash_read_status_register_1 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[38f]"></a>hal_flash_release_from_deep_power_down</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_release_from_deep_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_release_from_deep_power_down &rArr; lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
</UL>

<P><STRONG><a name="[395]"></a>hal_flash_write_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_flash_write_enable &rArr; lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
</UL>

<P><STRONG><a name="[37e]"></a>hal_flash_write_in_process</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ls_hal_flash.o(.xip_banned.hal_flash_write_in_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_status_register_0
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_status_check
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[379]"></a>hal_flash_writing_busy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ls_hal_flash.o(.xip_banned.hal_flash_writing_busy))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[398]"></a>hal_flash_writing_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ls_hal_flash.o(.xip_banned.hal_flash_writing_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_drv_var_init
</UL>

<P><STRONG><a name="[37f]"></a>hal_flash_xip_start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_xip_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_direct_read_config
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quad_io_read_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reading_critical
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[37a]"></a>hal_flash_xip_status_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ls_hal_flash.o(.xip_banned.hal_flash_xip_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[397]"></a>hal_flash_xip_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ls_hal_flash.o(.xip_banned.hal_flash_xip_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_drv_var_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[380]"></a>hal_flash_xip_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ls_hal_flash_qspi.o(.xip_banned.hal_flash_xip_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flash_xip_stop &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quad_io_read_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reading_critical
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[385]"></a>iwdg_check</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sleep.o(.xip_banned.iwdg_check))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
</UL>

<P><STRONG><a name="[37b]"></a>ls_ram_assert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ls_dbg.o(.xip_banned.ls_ram_assert))
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_global_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_register
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_register
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quad_io_read_dummy
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[3a0]"></a>lsqspi_baudrate_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ls_msp_qspi.o(.xip_banned.lsqspi_baudrate_get))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_init
</UL>

<P><STRONG><a name="[39c]"></a>lsqspi_direct_read_config</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_direct_read_config))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[39e]"></a>lsqspi_dly_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ls_msp_qspi.o(.xip_banned.lsqspi_dly_get))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_init
</UL>

<P><STRONG><a name="[399]"></a>lsqspi_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsqspi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_rd_cap_dly_get
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_msp_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_dly_get
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_baudrate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
</UL>

<P><STRONG><a name="[39d]"></a>lsqspi_msp_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ls_msp_qspi.o(.xip_banned.lsqspi_msp_init))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_init
</UL>

<P><STRONG><a name="[39f]"></a>lsqspi_rd_cap_dly_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ls_msp_qspi.o(.xip_banned.lsqspi_rd_cap_dly_get))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_init
</UL>

<P><STRONG><a name="[393]"></a>lsqspi_stig_read_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_stig_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_rd_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_func
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_register
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_security_area_func
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quad_io_read_dummy
</UL>

<P><STRONG><a name="[394]"></a>lsqspi_stig_read_register</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_stig_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_data
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_ram_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_status_register_1
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_status_register_0
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_reg_func
</UL>

<P><STRONG><a name="[390]"></a>lsqspi_stig_send_command</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_stig_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsqspi_stig_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_operation_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_chip_erase_func
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_release_from_deep_power_down
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_prog_erase_suspend
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_prog_erase_resume
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_deep_power_down
</UL>

<P><STRONG><a name="[392]"></a>lsqspi_stig_write_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_stig_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsqspi_stig_write_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_rd_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_prog_func
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_register
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_program_security_area_func
</UL>

<P><STRONG><a name="[391]"></a>lsqspi_stig_write_register</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_stig_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsqspi_stig_write_register &rArr; lsqspi_stig_write_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_data
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_ram_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_erase_security_area_func
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_erase_func
</UL>

<P><STRONG><a name="[38d]"></a>power_up_hardware_modules</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sleep.o(.xip_banned.power_up_hardware_modules))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_up_hardware_modules
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
</UL>

<P><STRONG><a name="[3a4]"></a>restore_psp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sleep.o(.xip_banned.restore_psp))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_recover_asm
</UL>

<P><STRONG><a name="[38c]"></a>cpu_sleep_asm</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sleep_asm.o(.xip_banned.sleep_recover_asm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_sleep_asm &rArr; before_wfi &rArr; sleep_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_psp_return_msp_and_addr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
</UL>

<P><STRONG><a name="[7b]"></a>cpu_recover_asm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep_asm.o(.xip_banned.sleep_recover_asm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_recover_asm &rArr; after_wfi &rArr; clk_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_psp
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.cpu_sleep_recover_init)
</UL>
<P><STRONG><a name="[3a3]"></a>store_psp_return_msp_and_addr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sleep.o(.xip_banned.store_psp_return_msp_and_addr))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
</UL>

<P><STRONG><a name="[34e]"></a>switch_to_xo16m</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform.o(.xip_banned.switch_to_xo16m))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
</UL>

<P><STRONG><a name="[1e2]"></a>systick_get_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(.xip_banned.systick_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_poll_timeout
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable (via Veneer)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
</UL>

<P><STRONG><a name="[1e3]"></a>systick_poll_timeout</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, systick.o(.xip_banned.systick_poll_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable (via Veneer)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_idiv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__div64_32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_to_lpcycles
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_idivmod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Public_Delay_Ms
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_hdl_sanity_check
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[130]"></a>attm_svc_create_db</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
</UL>

<P><STRONG><a name="[19d]"></a>attm_reserve_handle_range</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
</UL>

<P><STRONG><a name="[19f]"></a>attm_att_set_value</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
</UL>

<P><STRONG><a name="[131]"></a>attm_att_set_permission</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[12a]"></a>gapc_get_conhdl</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_upd_req_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_enable_req_handler
</UL>

<P><STRONG><a name="[17e]"></a>gapc_get_bdaddr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_get_peer_addr
</UL>

<P><STRONG><a name="[152]"></a>gapm_get_address_type</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_get_identity_bdaddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_irk_fill
</UL>

<P><STRONG><a name="[153]"></a>gapm_get_irk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_irk_fill
</UL>

<P><STRONG><a name="[151]"></a>gapm_get_bdaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_get_identity_bdaddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_irk_fill
</UL>

<P><STRONG><a name="[128]"></a>prf_env_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_enable_req_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_proto_mode_cfm_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_task_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_cfg_ind_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_task_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_handle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
</UL>

<P><STRONG><a name="[ea]"></a>prf_src_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_cfg_ind_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_cmp_evt_send
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
</UL>

<P><STRONG><a name="[eb]"></a>prf_dst_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_cfg_ind_send
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_cmp_evt_send
</UL>

<P><STRONG><a name="[f4]"></a>prf_get_task_from_id</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_ntf_cfg_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_batt_lvl_update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_send_keyboard_report
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hogpd_handler
</UL>

<P><STRONG><a name="[196]"></a>prf_pack_char_pres_fmt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[f1]"></a>prf_register_atthdl2gatt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
</UL>

<P><STRONG><a name="[f0]"></a>prf_unregister_atthdl2gatt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
</UL>

<P><STRONG><a name="[191]"></a>prf_check_svc_char_uuid128_validity</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[192]"></a>prf_check_svc_char_desc_uuid128_validity</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[13d]"></a>rwble_isr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_isr
</UL>

<P><STRONG><a name="[15c]"></a>lld_set_con_rssi_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_rssi_thld_init
</UL>

<P><STRONG><a name="[1a4]"></a>em_wr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_rf_init
</UL>

<P><STRONG><a name="[13a]"></a>rwip_init</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[142]"></a>rwip_schedule</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched
</UL>

<P><STRONG><a name="[144]"></a>rwip_us_2_lpcycles</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
</UL>

<P><STRONG><a name="[1a7]"></a>rwip_sleep</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_sleep_check
</UL>

<P><STRONG><a name="[1a6]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_sleep_check
</UL>

<P><STRONG><a name="[13e]"></a>rwip_isr</STRONG> (Thumb, 484 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_isr
</UL>

<P><STRONG><a name="[143]"></a>ke_timer_with_os_wrapper</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
</UL>

<P><STRONG><a name="[15a]"></a>ke_timer_set</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>

<P><STRONG><a name="[ec]"></a>ke_msg_alloc</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_ntf_cfg_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_server_read_req_reply
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_set_pkt_size
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_disconnect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_start_adv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_stack_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_batt_lvl_update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_send_keyboard_report
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_upd_req_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_enable_req_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_proto_mode_cfm_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fotas_gattc_send_evt_cmd.constprop.0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_create_adv_object
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpa_resolve_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cmd_send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_write_req_callback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_search_callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_get_dev_info_req_ind_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_add_service_with_start_handle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_cfg_ind_send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_param_update_req_ind_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_task_add_cmd_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_att_info_req_ind_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_post
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_req_ind_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_adv_data_cmp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hogpd_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_cmp_evt_send
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
</UL>

<P><STRONG><a name="[ed]"></a>ke_msg_send</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_ntf_cfg_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_server_read_req_reply
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_set_pkt_size
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_disconnect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_start_adv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_stack_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_batt_lvl_update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_send_keyboard_report
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_upd_req_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_enable_req_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_proto_mode_cfm_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fotas_gattc_send_evt_cmd.constprop.0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_create_adv_object
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpa_resolve_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cmd_send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_write_req_callback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_search_callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_get_dev_info_req_ind_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_add_service_with_start_handle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_cfg_ind_send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_param_update_req_ind_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_task_add_cmd_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_att_info_req_ind_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_post
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_req_ind_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_adv_data_cmp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hogpd_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_cmp_evt_send
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
</UL>

<P><STRONG><a name="[12e]"></a>ke_malloc</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
</UL>

<P><STRONG><a name="[f2]"></a>ke_free</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_destroy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_destroy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
</UL>

<P><STRONG><a name="[f6]"></a>ke_task_create</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_task_init
</UL>

<P><STRONG><a name="[ee]"></a>ke_state_set</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_cleanup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_upd_req_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_proto_mode_cfm_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_cmp_evt_send
</UL>

<P><STRONG><a name="[127]"></a>ke_state_get</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_upd_req_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_proto_mode_cfm_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[189]"></a>co_list_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_init
</UL>

<P><STRONG><a name="[18e]"></a>co_list_push_back</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_svc_register
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_init
</UL>

<P><STRONG><a name="[318]"></a>co_list_pop_front</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_alloc
</UL>

<P><STRONG><a name="[fa]"></a>__gnu_thumb1_case_sqi</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_exist
</UL>

<P><STRONG><a name="[176]"></a>__gnu_thumb1_case_uqi</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_cmp_evt_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hogpd_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[115]"></a>__gnu_thumb1_case_shi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[f9]"></a>__gnu_thumb1_case_uhi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[134]"></a>memcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_status_busy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_cmp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_digest_check
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_req_ind_handler
</UL>

<P><STRONG><a name="[e8]"></a>memcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_server_read_req_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_start_adv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_get_identity_bdaddr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_pack
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_send_keyboard_report
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fotas_gattc_send_evt_cmd.constprop.0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_create_adv_object
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpa_resolve_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cmd_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_irk_fill
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_tk_fill
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_ltk_fill
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_get_dev_info_req_ind_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_add_service_with_start_handle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_task_add_cmd_send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_req_ind_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_get_peer_addr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_adv_data_cmp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hogpd_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_bonding_info_search_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[148]"></a>memmove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_alloc_peer_id
</UL>

<P><STRONG><a name="[12f]"></a>memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libfw.o(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passkey_set
</UL>

<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[3a6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3a8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3a9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[3aa]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3ab]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcycles_to_hus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[3ac]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[332]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Send_Notification
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ClearParsedPackage
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_ClearParsedPackage
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_SerialPort3_SendData
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_SerialPort2_SendData
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_SerialPort1_SendData
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Ble_SendData
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_eccram
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_fifo_put
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_fifo_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_gen_by_word
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_read_with_cache
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_program
</UL>

<P><STRONG><a name="[359]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_data_bss_init
</UL>

<P><STRONG><a name="[3ad]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_write_through
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3ae]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_init
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_status_busy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_data_bss_init
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[291]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[cb]"></a>sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_passkey_input
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3b1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3b2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_scanf_longlong</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[d5]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e5]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e4]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[d8]"></a>_scanf_really_real</STRONG> (Thumb, 586 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[cc]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[45]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[3b3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ce]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3b4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3b5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[db]"></a>__vfscanf</STRONG> (Thumb, 814 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[e3]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[e6]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3b6]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, svcall_asm.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>adv_data_pack</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, libfw.o(.text.adv_data_pack))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Start_adv
</UL>

<P><STRONG><a name="[e9]"></a>ancc_cmp_evt_send</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, libfw.o(.text.ancc_cmp_evt_send), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[ef]"></a>ancc_enable_rsp_send</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, libfw.o(.text.ancc_enable_rsp_send), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_unregister_atthdl2gatt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_register_atthdl2gatt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[1cb]"></a>anpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.anpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1cc]"></a>anps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.anps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[f3]"></a>app_hid_send_keyboard_report</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, libfw.o(.text.app_hid_send_keyboard_report))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Hid_DeviceSendData
</UL>

<P><STRONG><a name="[89]"></a>app_init</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, libfw.o(.text.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = app_init &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_gen_by_word
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write_through
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.main_task_app_init)
</UL>
<P><STRONG><a name="[126]"></a>bas_batt_lvl_update</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libfw.o(.text.bas_batt_lvl_update))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[1be]"></a>basc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.basc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[129]"></a>bass_exe_operation</STRONG> (Thumb, 256 bytes, Stack size unknown bytes, libfw.o(.text.bass_exe_operation))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[12c]"></a>bass_get_att_handle</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, libfw.o(.text.bass_get_att_handle))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
</UL>

<P><STRONG><a name="[12d]"></a>bass_get_att_idx</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, libfw.o(.text.bass_get_att_idx))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[4f]"></a>bass_prf_itf_get</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfw.o(.text.bass_prf_itf_get))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.dev_manager_prf_bass_server_add)
</UL>
<P><STRONG><a name="[168]"></a>bass_prf_itf_set</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.bass_prf_itf_set))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_prf_bass_server_add
</UL>

<P><STRONG><a name="[132]"></a>bass_task_init</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.bass_task_init))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[1d6]"></a>bcsc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.bcsc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d5]"></a>bcss_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.bcss_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[133]"></a>bd_addr_cmp</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.bd_addr_cmp))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_bonding_info_search_req
</UL>

<P><STRONG><a name="[135]"></a>ble_init</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, libfw.o(.text.ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = ble_init &rArr; nvds_init &rArr; tinyfs_mkdir &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_get_reset_error
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_task_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_rf_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_Init
</UL>

<P><STRONG><a name="[13c]"></a>ble_isr</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.ble_isr))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_isr
</UL>

<P><STRONG><a name="[140]"></a>ble_radio_reg_config</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, libfw.o(.text.ble_radio_reg_config))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_rf_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_reg_restore
</UL>

<P><STRONG><a name="[13f]"></a>ble_reg_restore</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, libfw.o(.text.ble_reg_restore))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radio_reg_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_Handler
</UL>

<P><STRONG><a name="[146]"></a>ble_reg_store</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, libfw.o(.text.ble_reg_store))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
</UL>

<P><STRONG><a name="[141]"></a>ble_sched</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfw.o(.text.ble_sched))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_loop
</UL>

<P><STRONG><a name="[5d]"></a>ble_sleep</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, libfw.o(.text.ble_sleep))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_off
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_reg_store
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_with_os_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ip_rf_init)
</UL>
<P><STRONG><a name="[147]"></a>ble_storage_alloc_peer_id</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_alloc_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = ble_storage_alloc_peer_id &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[149]"></a>ble_storage_bonding_info_search_req</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_bonding_info_search_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_storage_bonding_info_search_req &rArr; rpa_resolve_start &rArr; ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpa_resolve_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_cmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_bonding_info
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_conn_req_ind_handler
</UL>

<P><STRONG><a name="[11f]"></a>ble_storage_gapm_addr_solved_ind_handler</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_gapm_addr_solved_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[11b]"></a>ble_storage_gapm_resolv_addr_cmp</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_gapm_resolv_addr_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_storage_gapm_resolv_addr_cmp &rArr; rpa_resolve_start &rArr; ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpa_resolve_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[35d]"></a>ble_storage_max_num_init</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_max_num_init))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_var_ptr_init
</UL>

<P><STRONG><a name="[14b]"></a>ble_storage_read_bonding_info</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_read_bonding_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpa_resolve_start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_search_callback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_req_ind_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_bonding_info_search_req
</UL>

<P><STRONG><a name="[14c]"></a>ble_storage_read_peer_client_info</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_read_peer_client_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_storage_read_peer_client_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_search_callback
</UL>

<P><STRONG><a name="[14d]"></a>ble_storage_read_peer_server_info</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_read_peer_server_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_storage_read_peer_server_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_search_callback
</UL>

<P><STRONG><a name="[14e]"></a>ble_storage_valid_peer_init</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_valid_peer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_storage_valid_peer_init &rArr; nvds_tag_exist &rArr; tinyfs_record_exist &rArr; if_dir_exist &rArr; linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_init
</UL>

<P><STRONG><a name="[150]"></a>ble_storage_write_bonding_info</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.ble_storage_write_bonding_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = ble_storage_write_bonding_info &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[1b3]"></a>blpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.blpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b2]"></a>blps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.blps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[13b]"></a>builtin_task_init</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, libfw.o(.text.builtin_task_init))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[155]"></a>builtin_timer_create</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.builtin_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = builtin_timer_create &rArr; linked_buf_alloc &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_key_Timer_Init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_counting_timer_create
</UL>

<P><STRONG><a name="[330]"></a>builtin_timer_env_register</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.builtin_timer_env_register))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[154]"></a>builtin_timer_handler</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.builtin_timer_handler))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_dynamic_msg_handler
</UL>

<P><STRONG><a name="[158]"></a>builtin_timer_start</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.builtin_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = builtin_timer_start &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyTimer_CallBack
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_key_Timer_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_counting_timer_start
</UL>

<P><STRONG><a name="[1de]"></a>cgmc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.cgmc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1dd]"></a>cgms_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.cgms_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[15b]"></a>con_rssi_thld_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, rssi_smth_algo.o(.text.con_rssi_thld_init))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_set_con_rssi_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[1c7]"></a>cppc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.cppc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c8]"></a>cpps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.cpps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c5]"></a>cscpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.cscpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c6]"></a>cscps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.cscps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[15d]"></a>dev_manager_add_service</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_add_service))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_add_service_with_start_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[15e]"></a>dev_manager_add_service_with_start_handle</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_add_service_with_start_handle))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_add_service
</UL>

<P><STRONG><a name="[160]"></a>dev_manager_create_legacy_adv_object</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_create_legacy_adv_object))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_create_adv_object
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Create_adv_Obj
</UL>

<P><STRONG><a name="[120]"></a>dev_manager_gapm_activity_created_ind_handler</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_activity_created_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[121]"></a>dev_manager_gapm_activity_stopped_ind_handler</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_activity_stopped_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_activity_stopped_ind_handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[117]"></a>dev_manager_gapm_create_activity_cmp</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_create_activity_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_create_activity_cmp &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[11a]"></a>dev_manager_gapm_delete_activity_cmp</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_delete_activity_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[122]"></a>dev_manager_gapm_ext_adv_report_ind_handler</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_ext_adv_report_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[11e]"></a>dev_manager_gapm_profile_added_ind_handler</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_profile_added_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_profile_added_ind_handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[161]"></a>dev_manager_gapm_profile_task_add_cmd_send</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_profile_task_add_cmd_send))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_prf_hid_server_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_prf_bass_server_add
</UL>

<P><STRONG><a name="[114]"></a>dev_manager_gapm_reset_cmp</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_reset_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_reset_cmp &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[123]"></a>dev_manager_gapm_scan_request_ind_handler</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_scan_request_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[11c]"></a>dev_manager_gapm_set_adv_data_cmp</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_set_adv_data_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_set_adv_data_cmp &rArr; gapm_adv_activity_start_cmd_send &rArr; gapm_activity_start_cmd_send &rArr; general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_activity_start_cmd_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[116]"></a>dev_manager_gapm_set_dev_config_cmp</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_set_dev_config_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_set_dev_config_cmp &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[11d]"></a>dev_manager_gapm_set_scan_rsp_data_cmp</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_set_scan_rsp_data_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_set_scan_rsp_data_cmp &rArr; gapm_adv_activity_start_cmd_send &rArr; gapm_activity_start_cmd_send &rArr; general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_activity_start_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[118]"></a>dev_manager_gapm_start_activity_cmp</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_start_activity_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = dev_manager_gapm_start_activity_cmp &rArr; general_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[119]"></a>dev_manager_gapm_stop_activity_cmp</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gapm_stop_activity_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[124]"></a>dev_manager_gattm_add_svc_rsp_handler</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_gattm_add_svc_rsp_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[164]"></a>dev_manager_get_identity_bdaddr</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_get_identity_bdaddr))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_bdaddr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[165]"></a>dev_manager_init</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dev_manager_init &rArr; sw_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Init
</UL>

<P><STRONG><a name="[167]"></a>dev_manager_prf_bass_server_add</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_prf_bass_server_add))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_task_add_cmd_send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_prf_itf_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[169]"></a>dev_manager_prf_hid_server_add</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_prf_hid_server_add))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_task_add_cmd_send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_prf_itf_set
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
</UL>

<P><STRONG><a name="[16b]"></a>dev_manager_set_mac_addr</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_set_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = dev_manager_set_mac_addr &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write_through
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shutdown_Rocker_Check_Handler
</UL>

<P><STRONG><a name="[16c]"></a>dev_manager_stack_init</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dev_manager_stack_init &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[16d]"></a>dev_manager_start_adv</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_start_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = dev_manager_start_adv &rArr; gapm_adv_activity_start_cmd_send &rArr; gapm_activity_start_cmd_send &rArr; general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_activity_start_cmd_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Start_adv
</UL>

<P><STRONG><a name="[1b1]"></a>disc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.disc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[194]"></a>diss_handle_to_value</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libfw.o(.text.diss_handle_to_value), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[1d2]"></a>envc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.envc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d1]"></a>envs_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.envs_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b8]"></a>findl_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.findl_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b9]"></a>findt_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.findt_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[16f]"></a>func_post</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfw.o(.text.func_post))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_IRQ_Handler_For_LSI_Counting
</UL>

<P><STRONG><a name="[170]"></a>fw_digest_check</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, libfw.o(.text.fw_digest_check), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_update
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_final
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[175]"></a>gap_manager_disconnect</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_disconnect))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
</UL>

<P><STRONG><a name="[100]"></a>gap_manager_gapc_bond_ind_handler</STRONG> (Thumb, 360 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_bond_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = gap_manager_gapc_bond_ind_handler &rArr; ble_storage_alloc_peer_id &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pair_done_evt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_alloc_peer_id
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write_through
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_write_bonding_info
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[ff]"></a>gap_manager_gapc_bond_req_ind_handler</STRONG> (Thumb, 380 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_bond_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = gap_manager_gapc_bond_req_ind_handler &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_slave_pair_response_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_gen_by_word
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passkey_set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[fc]"></a>gap_manager_gapc_cmp_evt_handler</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_cmp_evt_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[fd]"></a>gap_manager_gapc_conn_req_ind_handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_conn_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gap_manager_gapc_conn_req_ind_handler &rArr; ble_storage_bonding_info_search_req &rArr; rpa_resolve_start &rArr; ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_bonding_info_search_req
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[fe]"></a>gap_manager_gapc_disconnect_ind_handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_disconnect_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[102]"></a>gap_manager_gapc_encrypt_ind_handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_encrypt_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[101]"></a>gap_manager_gapc_encrypt_req_ind_handler</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_encrypt_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gap_manager_gapc_encrypt_req_ind_handler &rArr; ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_bonding_info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[106]"></a>gap_manager_gapc_get_dev_info_req_ind_handler</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_get_dev_info_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[107]"></a>gap_manager_gapc_get_rssi_ind_handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_get_rssi_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[fb]"></a>gap_manager_gapc_le_phy_ind_handler</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_le_phy_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[104]"></a>gap_manager_gapc_param_update_req_ind_handler</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_param_update_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[105]"></a>gap_manager_gapc_param_updated_ind_handler</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_param_updated_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[103]"></a>gap_manager_gapc_security_ind_handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_gapc_security_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[17d]"></a>gap_manager_get_peer_addr</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_get_peer_addr))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_slave_pair_response_send
</UL>

<P><STRONG><a name="[17f]"></a>gap_manager_init</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = gap_manager_init &rArr; ble_storage_valid_peer_init &rArr; nvds_tag_exist &rArr; tinyfs_record_exist &rArr; if_dir_exist &rArr; linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_peer_id_buf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_valid_peer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Init
</UL>

<P><STRONG><a name="[181]"></a>gap_manager_passkey_input</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_passkey_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = gap_manager_passkey_input &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passkey_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
</UL>

<P><STRONG><a name="[182]"></a>gap_manager_set_pkt_size</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_set_pkt_size))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerDataPackageLenUpdate
</UL>

<P><STRONG><a name="[178]"></a>gap_manager_slave_pair_response_send</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_slave_pair_response_send))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_send
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_get_peer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[183]"></a>gap_manager_tk_set</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.gap_manager_tk_set))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passkey_set
</UL>

<P><STRONG><a name="[113]"></a>gatt_manager_gattc_att_info_req_ind_handler</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_att_info_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[108]"></a>gatt_manager_gattc_cmp_evt_handler</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_cmp_evt_handler))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[10d]"></a>gatt_manager_gattc_disc_char_desc_ind_handler</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_disc_char_desc_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_manager_uuidlen_internal_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[10c]"></a>gatt_manager_gattc_disc_char_ind_handler</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_disc_char_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_manager_uuidlen_internal_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[10b]"></a>gatt_manager_gattc_disc_svc_incl_ind_handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_disc_svc_incl_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_manager_uuidlen_internal_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[10a]"></a>gatt_manager_gattc_disc_svc_ind_handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_disc_svc_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_manager_uuidlen_internal_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[10f]"></a>gatt_manager_gattc_event_ind_handler</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_event_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = gatt_manager_gattc_event_ind_handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[110]"></a>gatt_manager_gattc_event_req_ind_handler</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_event_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = gatt_manager_gattc_event_req_ind_handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[109]"></a>gatt_manager_gattc_mtu_exchanged_ind_handler</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_mtu_exchanged_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[10e]"></a>gatt_manager_gattc_read_ind_handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_read_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[111]"></a>gatt_manager_gattc_read_req_ind_handler</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_read_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svc_list_walk_through.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[112]"></a>gatt_manager_gattc_write_req_ind_handler</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_gattc_write_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svc_list_walk_through.isra.0
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[1fe]"></a>gatt_manager_get_svc_att_handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_get_svc_att_handle))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Send_Notification
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerReadQequest_Handler
</UL>

<P><STRONG><a name="[188]"></a>gatt_manager_init</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_init))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Init
</UL>

<P><STRONG><a name="[18a]"></a>gatt_manager_server_read_req_reply</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_server_read_req_reply))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerReadQequest_Handler
</UL>

<P><STRONG><a name="[18b]"></a>gatt_manager_server_send_notification</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_server_send_notification))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Send_Notification
</UL>

<P><STRONG><a name="[18d]"></a>gatt_manager_svc_register</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, libfw.o(.text.gatt_manager_svc_register))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[1c1]"></a>glpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.glpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c2]"></a>glps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.glps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[19c]"></a>hid_ntf_cfg_init</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libfw.o(.text.hid_ntf_cfg_init))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
</UL>

<P><STRONG><a name="[1bf]"></a>hogpbh_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.hogpbh_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[19e]"></a>hogpd_get_att_handle</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_get_att_handle))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_cfm_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_proto_mode_cfm_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
</UL>

<P><STRONG><a name="[18f]"></a>hogpd_get_att_idx</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_get_att_idx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[19b]"></a>hogpd_ntf_cfg_ind_send</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_ntf_cfg_ind_send))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[1a1]"></a>hogpd_ntf_send</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_ntf_send))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_report_upd_req_handler
</UL>

<P><STRONG><a name="[51]"></a>hogpd_prf_itf_get</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_prf_itf_get))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.dev_manager_prf_hid_server_add)
</UL>
<P><STRONG><a name="[16a]"></a>hogpd_prf_itf_set</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_prf_itf_set))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_prf_hid_server_add
</UL>

<P><STRONG><a name="[1a0]"></a>hogpd_task_init</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_task_init))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_init
</UL>

<P><STRONG><a name="[1c0]"></a>hogprh_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.hogprh_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b7]"></a>hrpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.hrpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b6]"></a>hrps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.hrps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b0]"></a>htpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.htpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1af]"></a>htpt_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.htpt_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[138]"></a>ip_rf_init</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, libfw.o(.text.ip_rf_init))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_txpwr_min_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_txpwr_max_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_wr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radio_reg_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[1d0]"></a>ipsc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.ipsc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1cf]"></a>ipss_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.ipss_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c9]"></a>lanc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.lanc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1ca]"></a>lans_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.lans_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1a5]"></a>mac_sleep_check</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libfw.o(.text.mac_sleep_check))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_sleep
</UL>

<P><STRONG><a name="[4e]"></a>nvds_del</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, libfw.o(.text.nvds_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = nvds_del &rArr; tinyfs_del_record &rArr; do_tinyfs_del_record &rArr; node_del &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_del_record
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ble_init)
</UL>
<P><STRONG><a name="[4c]"></a>nvds_get</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, libfw.o(.text.nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_io_read
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_deep_sleep_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_stack_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_alloc_peer_id
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_bonding_info
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_peer_client_info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_peer_server_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ble_init)
</UL>
<P><STRONG><a name="[137]"></a>nvds_init</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, libfw.o(.text.nvds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = nvds_init &rArr; tinyfs_mkdir &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[4d]"></a>nvds_put</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, libfw.o(.text.nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_set_mac_addr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_alloc_peer_id
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_write_bonding_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ble_init)
</UL>
<P><STRONG><a name="[14f]"></a>nvds_tag_exist</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, libfw.o(.text.nvds_tag_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = nvds_tag_exist &rArr; tinyfs_record_exist &rArr; if_dir_exist &rArr; linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_record_exist
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_sqi
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_valid_peer_init
</UL>

<P><STRONG><a name="[f7]"></a>nvds_write_through</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libfw.o(.text.nvds_write_through))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = nvds_write_through &rArr; tinyfs_write_through &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write_through
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_set_mac_addr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[1cd]"></a>paspc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.paspc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1ce]"></a>pasps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.pasps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1dc]"></a>plxc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.plxc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1db]"></a>plxs_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.plxs_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[50]"></a>prf_bass_handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libfw.o(.text.prf_bass_handler))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.dev_manager_prf_bass_server_add)
</UL>
<P><STRONG><a name="[206]"></a>prf_bass_server_callback_init</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libfw.o(.text.prf_bass_server_callback_init))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
</UL>

<P><STRONG><a name="[35c]"></a>prf_fn_init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.prf_fn_init))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_var_ptr_init
</UL>

<P><STRONG><a name="[205]"></a>prf_hid_server_callback_init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, libfw.o(.text.prf_hid_server_callback_init))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
</UL>

<P><STRONG><a name="[52]"></a>prf_hogpd_handler</STRONG> (Thumb, 452 bytes, Stack size unknown bytes, libfw.o(.text.prf_hogpd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = prf_hogpd_handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.dev_manager_prf_hid_server_add)
</UL>
<P><STRONG><a name="[62]"></a>prf_itf_get</STRONG> (Thumb, 452 bytes, Stack size unknown bytes, libfw.o(.text.prf_itf_get))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpts_prf_itf_get
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htpc_prf_itf_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blpc_prf_itf_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rscps_prf_itf_get
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anps_prf_itf_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipss_prf_itf_get
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scpps_prf_itf_get
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscs_prf_itf_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udsc_prf_itf_get
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tips_prf_itf_get
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgmc_prf_itf_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envc_prf_itf_get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htpt_prf_itf_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogprh_prf_itf_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpbh_prf_itf_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rscpc_prf_itf_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plxc_prf_itf_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basc_prf_itf_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_prf_itf_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpps_prf_itf_get
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pasps_prf_itf_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udss_prf_itf_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcsc_prf_itf_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cscps_prf_itf_get
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrpc_prf_itf_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envs_prf_itf_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lans_prf_itf_get
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tipc_prf_itf_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrps_prf_itf_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anpc_prf_itf_get
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsc_prf_itf_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paspc_prf_itf_get
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scppc_prf_itf_get
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_prf_itf_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cppc_prf_itf_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glps_prf_itf_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glpc_prf_itf_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plxs_prf_itf_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lanc_prf_itf_get
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxm_prf_itf_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wptc_prf_itf_get
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgms_prf_itf_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findl_prf_itf_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blps_prf_itf_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscc_prf_itf_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findt_prf_itf_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcss_prf_itf_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cscpc_prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.prf_fn_init)
</UL>
<P><STRONG><a name="[125]"></a>prf_ls_sig_mesh_handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libfw.o(.text.prf_ls_sig_mesh_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
</UL>

<P><STRONG><a name="[19a]"></a>program_segment_to_flash</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, libfw.o(.text.program_segment_to_flash), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_page_program
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[1ba]"></a>proxm_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.proxm_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1bb]"></a>proxr_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.proxr_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c3]"></a>rscpc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.rscpc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1c4]"></a>rscps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.rscps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1bd]"></a>scppc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.scppc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1bc]"></a>scpps_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.scpps_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[8d]"></a>stack_assert_asm</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stack_asm.o(.text.stack_assert_asm))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stack_assert_asm &rArr; stack_assert_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_assert_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[35b]"></a>statck_buffer_init</STRONG> (Thumb, 460 bytes, Stack size unknown bytes, libfw.o(.text.statck_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_var_ptr_init
</UL>

<P><STRONG><a name="[1b5]"></a>tipc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.tipc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1b4]"></a>tips_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.tips_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d8]"></a>udsc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.udsc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d7]"></a>udss_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.udss_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1da]"></a>wptc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.wptc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d9]"></a>wpts_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.wpts_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d4]"></a>wscc_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.wscc_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1d3]"></a>wscs_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, libfw.o(.text.wscs_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[1e1]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ls_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_ConversionStop_Disable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_poll_timeout (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1e4]"></a>ADC_Enable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ls_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_Enable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_poll_timeout (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
</UL>

<P><STRONG><a name="[6d]"></a>ADC_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_adc.o(i.ADC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Handler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_adc.o(i.HAL_ADC_MSP_Init)
</UL>
<P><STRONG><a name="[73]"></a>ADTIM1_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_timer.o(i.ADTIM1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADTIM1_Handler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_timer.o(i.HAL_TIM_MSP_Init)
</UL>
<P><STRONG><a name="[4a]"></a>BLE_WKUP_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep.o(i.BLE_WKUP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BLE_WKUP_Handler &rArr; modem_rf_reinit &rArr; tx_pwr_config &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wkup_status_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_IRQ_DISABLE
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clr_and_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_reinit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_reg_restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ble_init)
</UL>
<P><STRONG><a name="[1ea]"></a>BLE_WKUP_IRQ_DISABLE</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sleep.o(i.BLE_WKUP_IRQ_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_Handler
</UL>

<P><STRONG><a name="[6f]"></a>BSTIM1_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_timer.o(i.BSTIM1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSTIM1_Handler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_timer.o(i.HAL_TIM_MSP_Init)
</UL>
<P><STRONG><a name="[85]"></a>EXTI_Handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.EXTI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI_Handler &rArr; exti_io_handler &rArr; io_exti_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_io_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_soc_gpio.o(i.io_init)
</UL>
<P><STRONG><a name="[23d]"></a>GPIO_GetPort</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.GPIO_GetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_clr_pin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_pin
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pull_write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ana_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>

<P><STRONG><a name="[70]"></a>GPTIMA1_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_timer.o(i.GPTIMA1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPTIMA1_Handler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_timer.o(i.HAL_TIM_MSP_Init)
</UL>
<P><STRONG><a name="[71]"></a>GPTIMB1_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_timer.o(i.GPTIMB1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPTIMB1_Handler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_timer.o(i.HAL_TIM_MSP_Init)
</UL>
<P><STRONG><a name="[72]"></a>GPTIMC1_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_timer.o(i.GPTIMC1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPTIMC1_Handler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_timer.o(i.HAL_TIM_MSP_Init)
</UL>
<P><STRONG><a name="[1f7]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, ls_hal_adc.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_vbat_enable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_tempsensor_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
</UL>

<P><STRONG><a name="[243]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, callback.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_ADCEx_InjectedGetValue</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ls_hal_adc.o(i.HAL_ADCEx_InjectedGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_InjectedGetValue &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[241]"></a>HAL_ADCEx_InjectedStart_IT</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ls_hal_adc.o(i.HAL_ADCEx_InjectedStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADCEx_InjectedStart_IT &rArr; ADC_Enable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startup_Shutdown_Rocker_Check_Handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_AdcEnabledCheck_Handler
</UL>

<P><STRONG><a name="[242]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, ls_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_ADC_Init</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, ls_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_Init &rArr; ADC_ConversionStop_Disable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MSP_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MSP_Busy_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
</UL>

<P><STRONG><a name="[244]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[246]"></a>HAL_ADC_MSP_Busy_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_adc.o(i.HAL_ADC_MSP_Busy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_MSP_Busy_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc12b_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[245]"></a>HAL_ADC_MSP_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_msp_adc.o(i.HAL_ADC_MSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_MSP_Init &rArr; adc_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_msp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_IWDG_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ls_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_MSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Dog_Init
</UL>

<P><STRONG><a name="[249]"></a>HAL_IWDG_MSP_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ls_msp_iwdg.o(i.HAL_IWDG_MSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>

<P><STRONG><a name="[20b]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ls_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Dog_FeedDog
</UL>

<P><STRONG><a name="[24a]"></a>HAL_LSECC_Busy_Set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_msp_ecc.o(i.HAL_LSECC_Busy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LSECC_Busy_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Init
</UL>

<P><STRONG><a name="[24c]"></a>HAL_LSECC_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.HAL_LSECC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LSECC_DeInit &rArr; HAL_LSECC_Idle_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_MSP_DeInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Idle_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_calc_start
</UL>

<P><STRONG><a name="[24e]"></a>HAL_LSECC_Idle_Set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_msp_ecc.o(i.HAL_LSECC_Idle_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LSECC_Idle_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_DeInit
</UL>

<P><STRONG><a name="[24f]"></a>HAL_LSECC_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.HAL_LSECC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LSECC_Init &rArr; HAL_LSECC_MSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_MSP_Init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Busy_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_calc_start
</UL>

<P><STRONG><a name="[24d]"></a>HAL_LSECC_MSP_DeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ls_msp_ecc.o(i.HAL_LSECC_MSP_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_DeInit
</UL>

<P><STRONG><a name="[286]"></a>HAL_LSECC_MSP_INT_DISABLE</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ls_msp_ecc.o(i.HAL_LSECC_MSP_INT_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSECC_IRQHandler
</UL>

<P><STRONG><a name="[288]"></a>HAL_LSECC_MSP_INT_ENABLE</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ls_msp_ecc.o(i.HAL_LSECC_MSP_INT_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSECC_IRQHandler
</UL>

<P><STRONG><a name="[250]"></a>HAL_LSECC_MSP_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ls_msp_ecc.o(i.HAL_LSECC_MSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LSECC_MSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Init
</UL>

<P><STRONG><a name="[251]"></a>HAL_LSECC_PointMult</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ls_hal_ecc.o(i.HAL_LSECC_PointMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_LSECC_PointMult &rArr; result2buffer &rArr; copy_from_eccram &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result2buffer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_done_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_calc_start
</UL>

<P><STRONG><a name="[287]"></a>HAL_LSECC_PointMult_Complete_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.HAL_LSECC_PointMult_Complete_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSECC_IRQHandler
</UL>

<P><STRONG><a name="[34f]"></a>HAL_PIS_Config</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ls_hal_pis.o(i.HAL_PIS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PIS_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_start
</UL>

<P><STRONG><a name="[256]"></a>HAL_PIS_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_hal_pis.o(i.HAL_PIS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PIS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PIS_MSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[257]"></a>HAL_PIS_MSP_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ls_msp_pis.o(i.HAL_PIS_MSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PIS_Init
</UL>

<P><STRONG><a name="[261]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 602 bytes, Stack size 24 bytes, ls_hal_timer.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_MSP_Init &rArr; gptimc_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Busy_Set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Init
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ls_hal_timer.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Encoder_Start &rArr; TIM_CCxChannelCmd &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Init
</UL>

<P><STRONG><a name="[25c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, ls_hal_timer.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arduino_timerISR
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIMC1_Handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIMB1_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIMA1_Handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM1_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADTIM1_Handler
</UL>

<P><STRONG><a name="[259]"></a>HAL_TIM_MSP_Busy_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_msp_timer.o(i.HAL_TIM_MSP_Busy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_MSP_Busy_Set &rArr; timer_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[258]"></a>HAL_TIM_MSP_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ls_msp_timer.o(i.HAL_TIM_MSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_MSP_Init &rArr; gptimc_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimc_msp_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimb_msp_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptima_msp_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bstim_msp_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adtim_msp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[25d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[25f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26a]"></a>HAL_TRNG_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_hal_trng.o(i.HAL_TRNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TRNG_DeInit &rArr; HAL_TRNG_MSP_Idle_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_Idle_Set
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trng_value
</UL>

<P><STRONG><a name="[2f8]"></a>HAL_TRNG_GenerateRandomNumber</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ls_hal_trng.o(i.HAL_TRNG_GenerateRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trng_value
</UL>

<P><STRONG><a name="[74]"></a>HAL_TRNG_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ls_hal_trng.o(i.HAL_TRNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TRNG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_ReadyDataCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_trng.o(i.HAL_TRNG_MSP_Init)
</UL>
<P><STRONG><a name="[26e]"></a>HAL_TRNG_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ls_hal_trng.o(i.HAL_TRNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TRNG_Init &rArr; HAL_TRNG_MSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_Busy_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trng_value
</UL>

<P><STRONG><a name="[270]"></a>HAL_TRNG_MSP_Busy_Set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_msp_trng.o(i.HAL_TRNG_MSP_Busy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TRNG_MSP_Busy_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_Init
</UL>

<P><STRONG><a name="[26c]"></a>HAL_TRNG_MSP_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ls_msp_trng.o(i.HAL_TRNG_MSP_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_DeInit
</UL>

<P><STRONG><a name="[26b]"></a>HAL_TRNG_MSP_Idle_Set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_msp_trng.o(i.HAL_TRNG_MSP_Idle_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TRNG_MSP_Idle_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_DeInit
</UL>

<P><STRONG><a name="[26f]"></a>HAL_TRNG_MSP_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ls_msp_trng.o(i.HAL_TRNG_MSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TRNG_MSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_Init
</UL>

<P><STRONG><a name="[26d]"></a>HAL_TRNG_ReadyDataCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_trng.o(i.HAL_TRNG_ReadyDataCallback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HAL_UART1_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_uart.o(i.HAL_UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART1_Handler &rArr; HAL_UARTx_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_uart.o(i.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[76]"></a>HAL_UART2_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_uart.o(i.HAL_UART2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART2_Handler &rArr; HAL_UARTx_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_uart.o(i.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[77]"></a>HAL_UART3_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_msp_uart.o(i.HAL_UART3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART3_Handler &rArr; HAL_UARTx_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_uart.o(i.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[28d]"></a>HAL_UART_BaudRateDetectCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_uart.o(i.HAL_UART_BaudRateDetectCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRate_Detect_IT
</UL>

<P><STRONG><a name="[290]"></a>HAL_UART_DMA_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_uart_dma.o(i.HAL_UART_DMA_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT_DMA
</UL>

<P><STRONG><a name="[238]"></a>HAL_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ls_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MSP_Init &rArr; uart3_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Init
</UL>

<P><STRONG><a name="[274]"></a>HAL_UART_MSP_Busy_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_msp_uart.o(i.HAL_UART_MSP_Busy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_MSP_Busy_Set &rArr; uart_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[273]"></a>HAL_UART_MSP_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ls_msp_uart.o(i.HAL_UART_MSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_MSP_Init &rArr; uart3_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_msp_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_msp_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_msp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23b]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ls_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_SetRXTL
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_RecData_Handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Init
</UL>

<P><STRONG><a name="[28e]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, callback.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[374]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ls_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_SerialPort_SendData_Handler
</UL>

<P><STRONG><a name="[28f]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, callback.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
</UL>

<P><STRONG><a name="[272]"></a>HAL_UARTx_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ls_hal_uart.o(i.HAL_UARTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTx_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT_DMA
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRate_Detect_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_Handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_Handler
</UL>

<P><STRONG><a name="[7c]"></a>LPWKUP_Handler</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, sleep.o(i.LPWKUP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPWKUP_Handler &rArr; io_exti_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_callback
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wkup_callback
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_int_pending
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPendingIRQ (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.cpu_sleep_recover_init)
</UL>
<P><STRONG><a name="[6e]"></a>LSECC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.LSECC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSECC_IRQHandler &rArr; result2buffer &rArr; copy_from_eccram &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_PointMult_Complete_Callback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_MSP_INT_ENABLE
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_MSP_INT_DISABLE
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result2buffer
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_msp_ecc.o(i.HAL_LSECC_MSP_Init)
</UL>
<P><STRONG><a name="[280]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_log_init
</UL>

<P><STRONG><a name="[28b]"></a>SEGGER_RTT_PutCharSkip</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_PutCharSkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_PutCharSkip &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[49]"></a>SVC_Handler_C</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, svcall.o(i.SVC_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVC_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall_asm.o(.text.SVC_Handler)
</UL>
<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[25a]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ls_hal_timer.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[25b]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ls_hal_timer.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_CCxChannelCmd &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
</UL>

<P><STRONG><a name="[27b]"></a>UART_Transmit_IT_DMA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ls_hal_uart_dma.o(i.UART_Transmit_IT_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Transmit_IT_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMA_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[292]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b7]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[31d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex_output
</UL>

<P><STRONG><a name="[3b8]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3b9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[294]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3ba]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3bb]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3bc]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[17b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[295]"></a>__0vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3bd]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[3be]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[3bf]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[31e]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>

<P><STRONG><a name="[dc]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[324]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, platform.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_freq_update_and_hs_to_lpcycles
</UL>

<P><STRONG><a name="[202]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_bluetooth.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SyntheticData_Handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Electric_Check_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_BatteryUpdate_Handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_config
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_pwr_config
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>

<P><STRONG><a name="[296]"></a>__div64_32</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, common.o(i.__div64_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __div64_32
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_freq_update_and_hs_to_lpcycles
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcycles_to_hus
</UL>

<P><STRONG><a name="[3c0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[260]"></a>_arduino_timerISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_timer.o(i._arduino_timerISR))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[29b]"></a>_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, utils.o(i._set), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_final
</UL>

<P><STRONG><a name="[247]"></a>adc12b_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.adc12b_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MSP_Busy_Set
</UL>

<P><STRONG><a name="[240]"></a>adc_channel_tempsensor_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ls_msp_adc.o(i.adc_channel_tempsensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_channel_tempsensor_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensor_ldo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[23f]"></a>adc_channel_vbat_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ls_msp_adc.o(i.adc_channel_vbat_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[364]"></a>adtimer1_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.adtimer1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_status_set
</UL>

<P><STRONG><a name="[356]"></a>app_event_status_busy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.app_event_status_busy))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process
</UL>

<P><STRONG><a name="[136]"></a>arm_cm_set_int_isr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(i.arm_cm_set_int_isr))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_MSP_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_msp_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_msp_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_msp_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimc_msp_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimb_msp_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptima_msp_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bstim_msp_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adtim_msp_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_msp_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_recover_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
</UL>

<P><STRONG><a name="[1e8]"></a>ble_irq_clr_and_enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform.o(i.ble_irq_clr_and_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_irq_clr_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_Handler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_init
</UL>

<P><STRONG><a name="[2aa]"></a>ble_loop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform.o(i.ble_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_loop &rArr; sleep_process &rArr; check_and_sleep &rArr; deep_sleep &rArr; cpu_flash_deep_sleep_and_recover &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wkup_status_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b0]"></a>ble_stack_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform.o(i.ble_stack_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ble_stack_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler (via Veneer)
</UL>

<P><STRONG><a name="[2ab]"></a>ble_wkup_status_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sleep.o(i.ble_wkup_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_loop
</UL>

<P><STRONG><a name="[1e9]"></a>ble_wkup_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sleep.o(i.ble_wkup_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_Handler
</UL>

<P><STRONG><a name="[361]"></a>bstimer1_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.bstimer1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_status_set
</UL>

<P><STRONG><a name="[333]"></a>calc_acc_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, calc_acc.o(i.calc_acc_init))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[308]"></a>calc_div</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, calc_div.o(i.calc_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calc_div
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idiv_acc
</UL>

<P><STRONG><a name="[2b9]"></a>check_and_sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sleep.o(i.check_and_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = check_and_sleep &rArr; deep_sleep &rArr; cpu_flash_deep_sleep_and_recover &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_sleep_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process
</UL>

<P><STRONG><a name="[2bd]"></a>config_word_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, platform.o(i.config_word_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = config_word_get &rArr; hal_flash_quad_io_read &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_storage_base_offset
</UL>

<P><STRONG><a name="[2c0]"></a>cpu_sleep_recover_init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, platform.o(i.cpu_sleep_recover_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cpu_sleep_recover_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[2c2]"></a>crc16_lookup</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, crc16.o(i.crc16_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
</UL>

<P><STRONG><a name="[2c1]"></a>crc16ccitt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, crc16.o(i.crc16ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_write
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_read
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_remove_write
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_write
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_write
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_data_read
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_crc_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove_write
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_write
</UL>

<P><STRONG><a name="[145]"></a>dcdc_off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(i.dcdc_off))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
</UL>

<P><STRONG><a name="[2ba]"></a>deep_sleep</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sleep.o(i.deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = deep_sleep &rArr; cpu_flash_deep_sleep_and_recover &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_stop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wkup_status_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wkup_ble
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radio_en_sync
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_start
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd33_enable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd33_disable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_reinit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_sleep
</UL>

<P><STRONG><a name="[a2]"></a>do_hal_flash_chip_erase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_hal_flash.o(i.do_hal_flash_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_hal_flash_chip_erase &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>do_hal_flash_erase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ls_hal_flash.o(i.do_hal_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_hal_flash_erase &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>do_hal_flash_erase_security_area</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ls_hal_flash.o(i.do_hal_flash_erase_security_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_hal_flash_erase_security_area &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>do_hal_flash_program</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, ls_hal_flash_qspi.o(i.do_hal_flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_program_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>do_hal_flash_program_security_area</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ls_hal_flash_qspi.o(i.do_hal_flash_program_security_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_hal_flash_program_security_area &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>do_hal_flash_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_hal_flash.o(i.do_hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reading_critical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>do_hal_flash_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_hal_flash.o(i.do_hal_flash_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = do_hal_flash_read_reg &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reading_critical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_reg_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>do_hal_flash_read_security_area</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ls_hal_flash_qspi.o(i.do_hal_flash_read_security_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = do_hal_flash_read_security_area &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reading_critical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_security_area_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ecc_calc_start</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, platform.o(i.ecc_calc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ecc_calc_start &rArr; HAL_LSECC_PointMult &rArr; result2buffer &rArr; copy_from_eccram &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_PointMult
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[24b]"></a>ecc_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.ecc_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Idle_Set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_Busy_Set
</UL>

<P><STRONG><a name="[78]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputc &rArr; SEGGER_RTT_PutCharSkip &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_PutCharSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[312]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_data_write
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex_output
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_copy
</UL>

<P><STRONG><a name="[163]"></a>general_fifo_get</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fifo.o(i.general_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_fifo_empty
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_start_activity_cmp
</UL>

<P><STRONG><a name="[185]"></a>general_fifo_put</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fifo.o(i.general_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_fifo_full
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_send
</UL>

<P><STRONG><a name="[1aa]"></a>get_deep_sleep_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sleep.o(i.get_deep_sleep_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>

<P><STRONG><a name="[2f2]"></a>get_flash_process</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, platform.o(i.get_flash_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_flash_process &rArr; hal_flash_read_sfdp &rArr; hal_flash_read_24bit_addr_8bit_dummy &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_sfdp
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[2f5]"></a>get_ota_settings_offset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform.o(i.get_ota_settings_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_ota_settings_offset &rArr; hal_flash_total_size_get &rArr; hal_flash_read_id &rArr; hal_flash_read_reg_operation &rArr; do_hal_flash_read_reg &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_total_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_boot_addr_info
</UL>

<P><STRONG><a name="[180]"></a>get_peer_id_buf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stack_var.o(i.get_peer_id_buf))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_init
</UL>

<P><STRONG><a name="[2f7]"></a>get_trng_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform.o(i.get_trng_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_trng_value &rArr; HAL_TRNG_Init &rArr; HAL_TRNG_MSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_GenerateRandomNumber
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[2f9]"></a>gpio_af_init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.gpio_af_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_af_init &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gptima1_ch2_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gptima1_ch1_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart3_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart2_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart1_init
</UL>

<P><STRONG><a name="[362]"></a>gptimera1_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.gptimera1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_status_set
</UL>

<P><STRONG><a name="[23e]"></a>gptimerb1_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.gptimerb1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_status_set
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_IRQ_Handler_For_LSI_Counting
</UL>

<P><STRONG><a name="[363]"></a>gptimerc1_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.gptimerc1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_status_set
</UL>

<P><STRONG><a name="[301]"></a>hal_flash_dual_io_read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_flash_qspi.o(i.hal_flash_dual_io_read))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_read
</UL>

<P><STRONG><a name="[2fc]"></a>hal_flash_dual_page_program</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_dual_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hal_flash_dual_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_program_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_page_program
</UL>

<P><STRONG><a name="[2fe]"></a>hal_flash_erase_operation</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ls_hal_flash_svcall.o(i.hal_flash_erase_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hal_flash_erase_operation &rArr; do_hal_flash_erase &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_erase
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_sector_erase
</UL>

<P><STRONG><a name="[1df]"></a>hal_flash_multi_io_page_program</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_multi_io_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_page_program
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_page_program
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_mode_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_data_write
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_flag_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_segment_to_flash
</UL>

<P><STRONG><a name="[173]"></a>hal_flash_multi_io_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_multi_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_flash_multi_io_read &rArr; hal_flash_quad_io_read &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_mode_get (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_io_read
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_settings_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_digest_check
</UL>

<P><STRONG><a name="[20a]"></a>hal_flash_page_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_hal_flash.o(i.hal_flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hal_flash_page_erase &rArr; hal_flash_erase_operation &rArr; do_hal_flash_erase &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_boot_UpdateSuccess_Handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_UpdateData_WriteFlash
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shutdown_Rocker_Check_Handler
</UL>

<P><STRONG><a name="[2fd]"></a>hal_flash_program_operation</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ls_hal_flash_svcall.o(i.hal_flash_program_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_program
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_page_program
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_page_program
</UL>

<P><STRONG><a name="[9d]"></a>hal_flash_quad_io_read</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ls_hal_flash_qspi.o(i.hal_flash_quad_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hal_flash_quad_io_read &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_read
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_word_get
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs_nvm.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>hal_flash_quad_page_program</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_quad_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_program_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_boot_UpdateSuccess_Handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_UpdateData_WriteFlash
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shutdown_Rocker_Check_Handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_page_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs_nvm.o(.constdata)
</UL>
<P><STRONG><a name="[303]"></a>hal_flash_read_24bit_addr_8bit_dummy</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ls_hal_flash_qspi.o(i.hal_flash_read_24bit_addr_8bit_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hal_flash_read_24bit_addr_8bit_dummy &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_sfdp
</UL>

<P><STRONG><a name="[304]"></a>hal_flash_read_id</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hal_flash_read_id &rArr; hal_flash_read_reg_operation &rArr; do_hal_flash_read_reg &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_reg_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_total_size_get
</UL>

<P><STRONG><a name="[302]"></a>hal_flash_read_operation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ls_hal_flash_svcall.o(i.hal_flash_read_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_24bit_addr_8bit_dummy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_io_read
</UL>

<P><STRONG><a name="[305]"></a>hal_flash_read_reg_operation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ls_hal_flash_svcall.o(i.hal_flash_read_reg_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_flash_read_reg_operation &rArr; do_hal_flash_read_reg &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_reg
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_id
</UL>

<P><STRONG><a name="[306]"></a>hal_flash_read_security_area</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ls_hal_flash.o(i.hal_flash_read_security_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_flash_read_security_area &rArr; hal_flash_read_security_area_operation &rArr; do_hal_flash_read_security_area &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_security_area_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
</UL>

<P><STRONG><a name="[307]"></a>hal_flash_read_security_area_operation</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ls_hal_flash_svcall.o(i.hal_flash_read_security_area_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_flash_read_security_area_operation &rArr; do_hal_flash_read_security_area &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hal_flash_read_security_area
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_security_area
</UL>

<P><STRONG><a name="[2f3]"></a>hal_flash_read_sfdp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hal_flash_read_sfdp &rArr; hal_flash_read_24bit_addr_8bit_dummy &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_24bit_addr_8bit_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_process
</UL>

<P><STRONG><a name="[9e]"></a>hal_flash_sector_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_hal_flash.o(i.hal_flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hal_flash_sector_erase &rArr; hal_flash_erase_operation &rArr; do_hal_flash_erase &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs_nvm.o(.constdata)
</UL>
<P><STRONG><a name="[2f6]"></a>hal_flash_total_size_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ls_hal_flash.o(i.hal_flash_total_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hal_flash_total_size_get &rArr; hal_flash_read_id &rArr; hal_flash_read_reg_operation &rArr; do_hal_flash_read_reg &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_settings_offset
</UL>

<P><STRONG><a name="[91]"></a>idiv_acc</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, platform.o(i.idiv_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = idiv_acc &rArr; calc_div
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_div
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[21c]"></a>io_cfg_input</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = io_cfg_input &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_io_cfg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_cfg
</UL>

<P><STRONG><a name="[1f2]"></a>io_cfg_output</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = io_cfg_output &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_io_cfg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_output_cfg
</UL>

<P><STRONG><a name="[1f1]"></a>io_clr_pin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_clr_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = io_clr_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_ShutdownStep_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_IOExti_Close_AdcSampling
</UL>

<P><STRONG><a name="[283]"></a>io_exti_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, callback.o(i.io_exti_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_exti_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_io_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPWKUP_Handler
</UL>

<P><STRONG><a name="[21d]"></a>io_exti_config</STRONG> (Thumb, 588 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_exti_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_exti_config
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Init
</UL>

<P><STRONG><a name="[313]"></a>io_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ls_soc_gpio.o(i.io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[21e]"></a>io_pull_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ls_soc_gpio.o(i.io_pull_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = io_pull_write &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Init
</UL>

<P><STRONG><a name="[1f8]"></a>io_read_pin</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ls_soc_gpio.o(i.io_read_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = io_read_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_IOExti_Handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyTimer_CallBack
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startup_Shutdown_Rocker_Check_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_ShutdownStep_Handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_AdcEnabledCheck_Handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_StartingUp_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_IOExti_Close_AdcSampling
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_BatteryUpdate_Handler
</UL>

<P><STRONG><a name="[1f9]"></a>io_set_pin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_set_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_StartingUp_Handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_io_cfg
</UL>

<P><STRONG><a name="[21f]"></a>io_toggle_pin</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_toggle_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = io_toggle_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_StatusUpdate_Handler
</UL>

<P><STRONG><a name="[2e4]"></a>io_wkup_en_clr_set</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ls_soc_gpio.o(i.io_wkup_en_clr_set))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_io_handler
</UL>

<P><STRONG><a name="[204]"></a>io_write_pin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.io_write_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_clr_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SyntheticData_Handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ChangeModeData_Handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_ShutdownStep_Handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_LowPowerMode_Handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_shutdown_Handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_StartingUp_Handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Electric_Check_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_BatteryUpdate_Handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Console_Mode_Display
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_BlinkConrol_Handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_All_Close
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_output_cfg
</UL>

<P><STRONG><a name="[2ca]"></a>irq_reinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform.o(i.irq_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_reinit &rArr; irq_priority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd33_irq_enable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_init
</UL>

<P><STRONG><a name="[156]"></a>linked_buf_alloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, linked_buffer.o(i.linked_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linked_buf_alloc &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_alloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_create
</UL>

<P><STRONG><a name="[30a]"></a>linked_buf_contain_element</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, linked_buffer.o(i.linked_buf_contain_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_ref_cnt_by_idx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_hdl_sanity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_dir_exist
</UL>

<P><STRONG><a name="[157]"></a>linked_buf_get_elem_by_idx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, linked_buffer.o(i.linked_buf_get_elem_by_idx))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_handler
</UL>

<P><STRONG><a name="[159]"></a>linked_buf_get_elem_idx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, linked_buffer.o(i.linked_buf_get_elem_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_release
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_contain_element
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_alloc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>

<P><STRONG><a name="[31a]"></a>linked_buf_get_ref_cnt_by_idx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, linked_buffer.o(i.linked_buf_get_ref_cnt_by_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_contain_element
</UL>

<P><STRONG><a name="[31b]"></a>linked_buf_init</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, linked_buffer.o(i.linked_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linked_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[31c]"></a>linked_buf_release</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, linked_buffer.o(i.linked_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linked_buf_release &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_hdl_sanity_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_free
</UL>

<P><STRONG><a name="[87]"></a>log_hex_output</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, log.o(i.log_hex_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_hex_output &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(i.ls_log_init)
</UL>
<P><STRONG><a name="[86]"></a>log_output</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, log.o(i.log_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = log_output &rArr; putc &rArr; fputc &rArr; SEGGER_RTT_PutCharSkip &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(i.ls_log_init)
</UL>
<P><STRONG><a name="[94]"></a>lpcycles_to_hus</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, platform.o(i.lpcycles_to_hus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lpcycles_to_hus &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__div64_32
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[f8]"></a>ls_assert</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ls_dbg.o(i.ls_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_global_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_stack_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Start_adv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gap_GetDeviceName
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedGetValue
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_SerialPort3_SendData
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_SerialPort2_SendData
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_SerialPort1_SendData
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Ble_SendData
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_release
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_ref_cnt_by_idx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_del_record
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_parse
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_page_empty
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodes_info_load
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_check
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_valid_section
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_link
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_parse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_msg_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radio_en_sync
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_freq_update_and_hs_to_lpcycles
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_pwr_config
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_start_activity_cmp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_reset_cmp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_create_activity_cmp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_added_ind_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_alloc_peer_id
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_event_req_ind_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_dev_config_cmp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_exist
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_adv_data_cmp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hogpd_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_event_ind_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_activity_stopped_ind_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[321]"></a>ls_log_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, log.o(i.ls_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ls_log_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[2a6]"></a>lse_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.lse_init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init
</UL>

<P><STRONG><a name="[323]"></a>lsi_counting_timer_create</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform.o(i.lsi_counting_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = lsi_counting_timer_create &rArr; builtin_timer_create &rArr; linked_buf_alloc &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[96]"></a>lsi_freq_update_and_hs_to_lpcycles</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, platform.o(i.lsi_freq_update_and_hs_to_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsi_freq_update_and_hs_to_lpcycles &rArr; __div64_32
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__div64_32
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[2c6]"></a>lvd33_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, platform.o(i.lvd33_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
</UL>

<P><STRONG><a name="[2c9]"></a>lvd33_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, platform.o(i.lvd33_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = main &rArr; ble_loop &rArr; sleep_process &rArr; check_and_sleep &rArr; deep_sleep &rArr; cpu_flash_deep_sleep_and_recover &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[35f]"></a>main_task_app_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stack_var.o(i.main_task_app_init))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_app
</UL>

<P><STRONG><a name="[311]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_data_write
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex_output
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_copy
</UL>

<P><STRONG><a name="[2bf]"></a>memcpy32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, common.o(i.memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_in
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_in_data
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_calc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_in
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_eccram
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_data_write
</UL>

<P><STRONG><a name="[327]"></a>modem_rf_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, modem_rf_le501x.o(i.modem_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = modem_rf_init &rArr; hal_flash_read_security_area &rArr; hal_flash_read_security_area_operation &rArr; do_hal_flash_read_security_area &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_security_area
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_reinit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_retention
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_cal_testreg_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_cal_testreg_deinit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPF_CAL
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[1e7]"></a>modem_rf_reinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modem_rf_le501x.o(i.modem_rf_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modem_rf_reinit &rArr; tx_pwr_config &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_pwr_config
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_reg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_Handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
</UL>

<P><STRONG><a name="[2cc]"></a>node_search</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, tinyfs.o(i.node_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = node_search &rArr; node_list_search &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_list_search
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_remove_parse
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_parse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove_parse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_parse
</UL>

<P><STRONG><a name="[348]"></a>ota_boot_addr_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ota_settings.o(i.ota_boot_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ota_boot_addr_set &rArr; settings_set &rArr; inversion_data_write &rArr; hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_boot_addr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_SoftwareReset_Handler
</UL>

<P><STRONG><a name="[34a]"></a>peri_status_busy</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sys_stat.o(i.peri_status_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peri_status_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process
</UL>

<P><STRONG><a name="[1f4]"></a>pinmux_adc12b_in4_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_soc_gpio.o(i.pinmux_adc12b_in4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pinmux_adc12b_in4_init &rArr; pinmux_ana_func1_init &rArr; gpio_ana_init &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_ana_func1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
</UL>

<P><STRONG><a name="[1f3]"></a>pinmux_adc12b_in5_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ls_soc_gpio.o(i.pinmux_adc12b_in5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pinmux_adc12b_in5_init &rArr; pinmux_ana_func1_init &rArr; gpio_ana_init &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_ana_func1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
</UL>

<P><STRONG><a name="[34b]"></a>pinmux_ana_func1_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_soc_gpio.o(i.pinmux_ana_func1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pinmux_ana_func1_init &rArr; gpio_ana_init &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ana_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_adc12b_in5_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_adc12b_in4_init
</UL>

<P><STRONG><a name="[210]"></a>pinmux_gptima1_ch1_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ls_soc_gpio.o(i.pinmux_gptima1_ch1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pinmux_gptima1_ch1_init &rArr; timer_ch_io_cfg &rArr; timer_ch_io_output_cfg &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_cfg
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Init
</UL>

<P><STRONG><a name="[211]"></a>pinmux_gptima1_ch2_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ls_soc_gpio.o(i.pinmux_gptima1_ch2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pinmux_gptima1_ch2_init &rArr; timer_ch_io_cfg &rArr; timer_ch_io_output_cfg &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_cfg
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Init
</UL>

<P><STRONG><a name="[237]"></a>pinmux_uart1_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.pinmux_uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinmux_uart1_init &rArr; uart_io_cfg &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_io_cfg
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Init
</UL>

<P><STRONG><a name="[239]"></a>pinmux_uart2_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.pinmux_uart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinmux_uart2_init &rArr; uart_io_cfg &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_io_cfg
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Init
</UL>

<P><STRONG><a name="[23a]"></a>pinmux_uart3_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.pinmux_uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinmux_uart3_init &rArr; uart_io_cfg &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_io_cfg
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Init
</UL>

<P><STRONG><a name="[8e]"></a>platform_reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, platform.o(i.platform_reset))
<BR><BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_xo16m (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_SoftwareReset_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[139]"></a>plf_get_reset_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(i.plf_get_reset_error))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[36e]"></a>print_indent</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tinyfs.o(i.print_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = print_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_tree
</UL>

<P><STRONG><a name="[31f]"></a>putc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = putc &rArr; fputc &rArr; SEGGER_RTT_PutCharSkip &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>

<P><STRONG><a name="[f5]"></a>rand_gen_by_word</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, common.o(i.rand_gen_by_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rand_gen_by_word
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_cfm_csrk_fill
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[331]"></a>rco_freq_counting_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, platform.o(i.rco_freq_counting_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rco_freq_counting_init
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[322]"></a>rco_freq_counting_start</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, platform.o(i.rco_freq_counting_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rco_freq_counting_start &rArr; HAL_PIS_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PIS_Config
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimerb1_status_set
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_counting_timer_callback
</UL>

<P><STRONG><a name="[5f]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rf_force_agc_enable))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ip_rf_init)
</UL>
<P><STRONG><a name="[97]"></a>rf_reg_config</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, modem_rf_le501x.o(i.rf_reg_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_reg_config &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL>
<P><STRONG><a name="[5e]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rf_reset))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ip_rf_init)
</UL>
<P><STRONG><a name="[60]"></a>rf_rssi_convert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, modem_rf_le501x.o(i.rf_rssi_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_rssi_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ip_rf_init)
</UL>
<P><STRONG><a name="[61]"></a>rf_txpwr_cs_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rf_txpwr_cs_get))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ip_rf_init)
</UL>
<P><STRONG><a name="[5c]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rf_txpwr_dbm_get))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.ip_rf_init)
</UL>
<P><STRONG><a name="[285]"></a>rtc_wkup_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ls_hal_rtc.o(i.rtc_wkup_callback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPWKUP_Handler
</UL>

<P><STRONG><a name="[1a3]"></a>rx_txpwr_max_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rx_txpwr_max_get))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_rf_init
</UL>

<P><STRONG><a name="[1a2]"></a>rx_txpwr_min_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rx_txpwr_min_get))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_rf_init
</UL>

<P><STRONG><a name="[349]"></a>settings_set</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inflash_settings.o(i.settings_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = settings_set &rArr; inversion_data_write &rArr; hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_data_write
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_flag_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_settings_get
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_boot_addr_set
</UL>

<P><STRONG><a name="[2ac]"></a>sleep_process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sleep.o(i.sleep_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sleep_process &rArr; check_and_sleep &rArr; deep_sleep &rArr; cpu_flash_deep_sleep_and_recover &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_log_resume
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_log_pause
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_sleep
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_status_busy
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_status_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_loop
</UL>

<P><STRONG><a name="[1e0]"></a>stack_assert_c</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, ls_dbg.o(i.stack_assert_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stack_assert_c
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_global_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_assert_asm
</UL>

<P><STRONG><a name="[35a]"></a>stack_var_ptr_init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stack_var.o(i.stack_var_ptr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = stack_var_ptr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_max_num_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_buffer_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_fn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
</UL>

<P><STRONG><a name="[2ef]"></a>sw_fifo_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.sw_fifo_empty))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_fifo_get
</UL>

<P><STRONG><a name="[2f0]"></a>sw_fifo_full</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fifo.o(i.sw_fifo_full))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_fifo_put
</UL>

<P><STRONG><a name="[166]"></a>sw_fifo_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fifo.o(i.sw_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sw_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_init
</UL>

<P><STRONG><a name="[27f]"></a>sys_init_app</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform.o(i.sys_init_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = sys_init_app &rArr; module_init &rArr; tinyfs_init &rArr; nodes_info_load &rArr; nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_app_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_Init
</UL>

<P><STRONG><a name="[2cb]"></a>systick_start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, systick.o(i.systick_start))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[2c5]"></a>systick_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.systick_stop))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
</UL>

<P><STRONG><a name="[172]"></a>tc_sha256_final</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, sha256.o(i.tc_sha256_final), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_digest_check
</UL>

<P><STRONG><a name="[171]"></a>tc_sha256_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sha256.o(i.tc_sha256_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_digest_check
</UL>

<P><STRONG><a name="[174]"></a>tc_sha256_update</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sha256.o(i.tc_sha256_update), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_digest_check
</UL>

<P><STRONG><a name="[29f]"></a>tempsensor_ldo_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.tempsensor_ldo_init))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_tempsensor_enable
</UL>

<P><STRONG><a name="[1a8]"></a>tinyfs_del_record</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tinyfs.o(i.tinyfs_del_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tinyfs_del_record &rArr; do_tinyfs_del_record &rArr; node_del &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_unlock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_dir_exist
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_del_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
</UL>

<P><STRONG><a name="[335]"></a>tinyfs_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tinyfs.o(i.tinyfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tinyfs_init &rArr; nodes_info_load &rArr; nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_read_all
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_dir_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodes_info_load
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_alloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prev_section
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_section_find
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_head_tail_section
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_build
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_section_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[1ab]"></a>tinyfs_mkdir</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, tinyfs.o(i.tinyfs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tinyfs_mkdir &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_unlock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_lock
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_alloc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_dir_exist
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child_dir_by_name
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_write
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[344]"></a>tinyfs_nvm_program</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, tinyfs_write_cache.o(i.tinyfs_nvm_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tinyfs_nvm_program &rArr; tinyfs_nvm_write_through
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_write_through
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_write
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>

<P><STRONG><a name="[347]"></a>tinyfs_nvm_read_with_cache</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tinyfs_write_cache.o(i.tinyfs_nvm_read_with_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_read_node
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_page_empty
</UL>

<P><STRONG><a name="[2c4]"></a>tinyfs_nvm_write_through</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tinyfs_write_cache.o(i.tinyfs_nvm_write_through))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tinyfs_nvm_write_through
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_program
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_write_through
</UL>

<P><STRONG><a name="[336]"></a>tinyfs_print_dir_tree</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tinyfs.o(i.tinyfs_print_dir_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tinyfs_print_dir_tree &rArr; traverse_tree &rArr;  traverse_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[1a9]"></a>tinyfs_read</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tinyfs.o(i.tinyfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_unlock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_dir_exist
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>

<P><STRONG><a name="[1ad]"></a>tinyfs_record_exist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tinyfs.o(i.tinyfs_record_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tinyfs_record_exist &rArr; if_dir_exist &rArr; linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_unlock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_dir_exist
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_exist
</UL>

<P><STRONG><a name="[1ac]"></a>tinyfs_write</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, tinyfs.o(i.tinyfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_unlock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_dir_exist
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_hid_server_CallBack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[1ae]"></a>tinyfs_write_through</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tinyfs.o(i.tinyfs_write_through))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tinyfs_write_through &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_unlock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mutex_lock
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_write_through
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_hid_server_CallBack
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write_through
</UL>

<P><STRONG><a name="[36d]"></a>traverse_tree</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, tinyfs.o(i.traverse_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = traverse_tree &rArr;  traverse_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_tree
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_indent
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_tree
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_print_dir_tree
</UL>

<P><STRONG><a name="[271]"></a>trng_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.trng_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_Idle_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TRNG_MSP_Busy_Set
</UL>

<P><STRONG><a name="[371]"></a>uart1_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.uart1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_status_set
</UL>

<P><STRONG><a name="[372]"></a>uart2_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.uart2_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_status_set
</UL>

<P><STRONG><a name="[373]"></a>uart3_status_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_stat.o(i.uart3_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_status_set
</UL>

<P><STRONG><a name="[355]"></a>uart_log_pause</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log.o(i.uart_log_pause))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process
</UL>

<P><STRONG><a name="[357]"></a>uart_log_resume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log.o(i.uart_log_resume))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_process
</UL>

<P><STRONG><a name="[95]"></a>us_to_lpcycles</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform.o(i.us_to_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_to_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.stack_var_ptr_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d]"></a>Public_BufferInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, public.o(i.Public_BufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Public_BufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> public.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Public_Delay_Ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, public.o(i.Public_Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Public_Delay_Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> public.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Hardware_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, system_init.o(i.Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Hardware_Init &rArr; sys_init_app &rArr; module_init &rArr; tinyfs_init &rArr; nodes_info_load &rArr; nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_app
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Info_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_init.o(.data)
</UL>
<P><STRONG><a name="[281]"></a>System_Info_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, system_init.o(i.System_Info_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Info_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_Init
</UL>

<P><STRONG><a name="[10]"></a>Bsp_Adc_Capture_Handler</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, bsp_adc.o(i.Bsp_Adc_Capture_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Bsp_Adc_Capture_Handler &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedGetValue
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRocker_Up_Handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRocker_Right_Handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRocker_Left_Handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRocker_Down_Handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRocker_CenterSlide_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_adc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Bsp_Adc_Init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, bsp_adc.o(i.Bsp_Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Bsp_Adc_Init &rArr; HAL_ADC_Init &rArr; ADC_ConversionStop_Disable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_adc12b_in5_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_adc12b_in4_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_clr_pin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_adc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Shutdown_Rocker_Check_Handler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_adc.o(i.Shutdown_Rocker_Check_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = Shutdown_Rocker_Check_Handler &rArr; dev_manager_set_mac_addr &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_page_program
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_set_mac_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_adc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Startup_Shutdown_Rocker_Check_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_adc.o(i.Startup_Shutdown_Rocker_Check_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Startup_Shutdown_Rocker_Check_Handler &rArr; HAL_ADCEx_InjectedStart_IT &rArr; ADC_Enable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_adc.o(.data)
</UL>
<P><STRONG><a name="[1f0]"></a>vRocker_CenterSlide_Handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_adc.o(i.vRocker_CenterSlide_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vRocker_CenterSlide_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[1ed]"></a>vRocker_Down_Handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_adc.o(i.vRocker_Down_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vRocker_Down_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[1ee]"></a>vRocker_Left_Handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_adc.o(i.vRocker_Left_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vRocker_Left_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[1ef]"></a>vRocker_Right_Handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_adc.o(i.vRocker_Right_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vRocker_Right_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[1ec]"></a>vRocker_Up_Handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_adc.o(i.vRocker_Up_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vRocker_Up_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Capture_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>Bsp_BlueTooth_Create_adv_Obj</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Create_adv_Obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_Create_adv_Obj
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_create_legacy_adv_object
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
</UL>

<P><STRONG><a name="[1fb]"></a>Bsp_BlueTooth_Gap_GetDeviceName</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Gap_GetDeviceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_BlueTooth_Gap_GetDeviceName &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gap_manager_CallBack
</UL>

<P><STRONG><a name="[1fc]"></a>Bsp_BlueTooth_Gatt_ServerDataPackageLenUpdate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Gatt_ServerDataPackageLenUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_Gatt_ServerDataPackageLenUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_set_pkt_size
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gatt_manager_CallBack
</UL>

<P><STRONG><a name="[1fd]"></a>Bsp_BlueTooth_Gatt_ServerReadQequest_Handler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Gatt_ServerReadQequest_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_Gatt_ServerReadQequest_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_server_read_req_reply
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_get_svc_att_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gatt_manager_CallBack
</UL>

<P><STRONG><a name="[1ff]"></a>Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_gatt_manager_CallBack
</UL>

<P><STRONG><a name="[13]"></a>Bsp_BlueTooth_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_Init &rArr; gap_manager_init &rArr; ble_storage_valid_peer_init &rArr; nvds_tag_exist &rArr; tinyfs_record_exist &rArr; if_dir_exist &rArr; linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Bsp_BlueTooth_Send_Notification</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Send_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_Send_Notification
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_server_send_notification
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_get_svc_att_handle
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_min
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Bsp_BlueTooth_Start_adv</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_Start_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_Start_adv &rArr; dev_manager_start_adv &rArr; gapm_adv_activity_start_cmd_send &rArr; gapm_activity_start_cmd_send &rArr; general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_start_adv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>Bsp_BlueTooth_dev_manager_CallBack</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_dev_manager_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_dev_manager_CallBack &rArr; Bsp_BlueTooth_prf_Added_Handler &rArr; tinyfs_mkdir &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_svc_register
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_stack_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_prf_bass_server_add
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_get_identity_bdaddr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_add_service
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_rssi_thld_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_batt_lvl_update
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_prf_Added_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Start_adv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(i.Bsp_BlueTooth_Init)
</UL>
<P><STRONG><a name="[65]"></a>Bsp_BlueTooth_gap_manager_CallBack</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_gap_manager_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_gap_manager_CallBack &rArr; gap_manager_passkey_input &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_longlong &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_ntf_cfg_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_slave_pair_response_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_passkey_input
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_disconnect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gap_GetDeviceName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(i.Bsp_BlueTooth_Init)
</UL>
<P><STRONG><a name="[66]"></a>Bsp_BlueTooth_gatt_manager_CallBack</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_gatt_manager_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_gatt_manager_CallBack &rArr; Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerWriteQequest_Handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerReadQequest_Handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Gatt_ServerDataPackageLenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(i.Bsp_BlueTooth_Init)
</UL>
<P><STRONG><a name="[67]"></a>Bsp_BlueTooth_hid_con_rssi_judge</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_hid_con_rssi_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_BlueTooth_hid_con_rssi_judge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(i.Bsp_BlueTooth_dev_manager_CallBack)
</UL>
<P><STRONG><a name="[203]"></a>Bsp_BlueTooth_prf_Added_Handler</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_prf_Added_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = Bsp_BlueTooth_prf_Added_Handler &rArr; tinyfs_mkdir &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_hid_server_callback_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_bass_server_callback_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_prf_hid_server_add
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Create_adv_Obj
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_dev_manager_CallBack
</UL>

<P><STRONG><a name="[69]"></a>Bsp_BlueTooth_prf_batt_server_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_prf_batt_server_CallBack))
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(i.Bsp_BlueTooth_prf_Added_Handler)
</UL>
<P><STRONG><a name="[68]"></a>Bsp_BlueTooth_prf_hid_server_CallBack</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_bluetooth.o(i.Bsp_BlueTooth_prf_hid_server_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Bsp_BlueTooth_prf_hid_server_CallBack &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write_through
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_bluetooth.o(i.Bsp_BlueTooth_prf_Added_Handler)
</UL>
<P><STRONG><a name="[201]"></a>co_min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_bluetooth.o(i.co_min))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BlueTooth_Send_Notification
</UL>

<P><STRONG><a name="[19]"></a>Bsp_Boot_Cmd_R_all_file_finish_Handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_Cmd_R_all_file_finish_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Bsp_Boot_Cmd_R_all_file_finish_Handler &rArr; Bsp_boot_UpdateSuccess_Handler &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_boot_UpdateSuccess_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Bsp_Boot_Cmd_R_change_firmware_Handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_Cmd_R_change_firmware_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Boot_Cmd_R_change_firmware_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Bsp_Boot_Cmd_R_check_image_base_Handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_Cmd_R_check_image_base_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Boot_Cmd_R_check_image_base_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>Bsp_Boot_Cmd_R_check_keyboard_version_Handler</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bsp_boot.o(i.Bsp_Boot_Cmd_R_check_keyboard_version_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Boot_Cmd_R_check_keyboard_version_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Bsp_Boot_Cmd_R_start_update_Handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_Cmd_R_start_update_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Boot_Cmd_R_start_update_Handler &rArr; Bsp_Boot_StartUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_StartUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Bsp_Boot_Cmd_R_update_file_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_Cmd_R_update_file_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Bsp_Boot_Cmd_R_update_file_Handler &rArr; Bsp_Boot_UpdateData_WriteFlash &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_UpdateData_WriteFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Bsp_Boot_InfoGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_boot.o(i.Bsp_Boot_InfoGet))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_StartUpdate
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_Cmd_R_check_keyboard_version_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_Cmd_R_check_image_base_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Bsp_Boot_JumpAppRun</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_JumpAppRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Boot_JumpAppRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[208]"></a>Bsp_Boot_StartUpdate</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bsp_boot.o(i.Bsp_Boot_StartUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Boot_StartUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_InfoGet
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_Cmd_R_start_update_Handler
</UL>

<P><STRONG><a name="[1e]"></a>Bsp_Boot_SysInfoGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_boot.o(i.Bsp_Boot_SysInfoGet))
<BR>[Address Reference Count : 1]<UL><LI> bsp_boot.o(.data)
</UL>
<P><STRONG><a name="[209]"></a>Bsp_Boot_UpdateData_WriteFlash</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, bsp_boot.o(i.Bsp_Boot_UpdateData_WriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Bsp_Boot_UpdateData_WriteFlash &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_page_program
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_Cmd_R_update_file_Handler
</UL>

<P><STRONG><a name="[207]"></a>Bsp_boot_UpdateSuccess_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_boot.o(i.Bsp_boot_UpdateSuccess_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Bsp_boot_UpdateSuccess_Handler &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_quad_page_program
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Boot_Cmd_R_all_file_finish_Handler
</UL>

<P><STRONG><a name="[20]"></a>Bsp_Encoder_Control</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_encoder.o(i.Bsp_Encoder_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Encoder_Control &rArr; Bsp_Encoder_Postive_Hanlder
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Postive_Hanlder
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Negative_Hanlder
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_GetEncoderCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_encoder.o(.data)
</UL>
<P><STRONG><a name="[20d]"></a>Bsp_Encoder_GetEncoderCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp_encoder.o(i.Bsp_Encoder_GetEncoderCount))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Control
</UL>

<P><STRONG><a name="[1f]"></a>Bsp_Encoder_Init</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, bsp_encoder.o(i.Bsp_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Bsp_Encoder_Init &rArr; pinmux_gptima1_ch2_init &rArr; timer_ch_io_cfg &rArr; timer_ch_io_output_cfg &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gptima1_ch2_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gptima1_ch1_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_encoder.o(.data)
</UL>
<P><STRONG><a name="[20f]"></a>Bsp_Encoder_Negative_Hanlder</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_encoder.o(i.Bsp_Encoder_Negative_Hanlder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Encoder_Negative_Hanlder
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Control
</UL>

<P><STRONG><a name="[20e]"></a>Bsp_Encoder_Postive_Hanlder</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_encoder.o(i.Bsp_Encoder_Postive_Hanlder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Encoder_Postive_Hanlder
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Encoder_Control
</UL>

<P><STRONG><a name="[6b]"></a>Bsp_KeyTimer_CallBack</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, bsp_key.o(i.Bsp_KeyTimer_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Bsp_KeyTimer_CallBack &rArr; io_read_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPress_Handle_PowerKey
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPress_Handle_PhotoKey
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPress_Handle_HomeKey
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.Bsp_key_Timer_Init)
</UL>
<P><STRONG><a name="[22]"></a>Bsp_Key_IOExti_Handler</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, bsp_key.o(i.Bsp_Key_IOExti_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Key_IOExti_Handler &rArr; io_read_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpSlide_Handle_StirKey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestore_Handle_LongPress_HomeKey
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMotorCalibrationMode_Press_PhotoKey
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDownSlide_Handle_StirKey
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCenterSlide_Handle_StirKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Bsp_Key_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_key.o(i.Bsp_Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bsp_Key_Init &rArr; io_pull_write &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pull_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_config
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Bsp_key_Timer_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_key.o(i.Bsp_key_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Bsp_key_Timer_Init &rArr; builtin_timer_create &rArr; linked_buf_alloc &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_create
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(.data)
</UL>
<P><STRONG><a name="[21a]"></a>vCenterSlide_Handle_StirKey</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_key.o(i.vCenterSlide_Handle_StirKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vCenterSlide_Handle_StirKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_IOExti_Handler
</UL>

<P><STRONG><a name="[219]"></a>vDownSlide_Handle_StirKey</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_key.o(i.vDownSlide_Handle_StirKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vDownSlide_Handle_StirKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_IOExti_Handler
</UL>

<P><STRONG><a name="[217]"></a>vMotorCalibrationMode_Press_PhotoKey</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_key.o(i.vMotorCalibrationMode_Press_PhotoKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMotorCalibrationMode_Press_PhotoKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_IOExti_Handler
</UL>

<P><STRONG><a name="[216]"></a>vPress_Handle_HomeKey</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, bsp_key.o(i.vPress_Handle_HomeKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPress_Handle_HomeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyTimer_CallBack
</UL>

<P><STRONG><a name="[214]"></a>vPress_Handle_PhotoKey</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, bsp_key.o(i.vPress_Handle_PhotoKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPress_Handle_PhotoKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyTimer_CallBack
</UL>

<P><STRONG><a name="[215]"></a>vPress_Handle_PowerKey</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_key.o(i.vPress_Handle_PowerKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPress_Handle_PowerKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyTimer_CallBack
</UL>

<P><STRONG><a name="[218]"></a>vRestore_Handle_LongPress_HomeKey</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bsp_key.o(i.vRestore_Handle_LongPress_HomeKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vRestore_Handle_LongPress_HomeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_IOExti_Handler
</UL>

<P><STRONG><a name="[21b]"></a>vUpSlide_Handle_StirKey</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_key.o(i.vUpSlide_Handle_StirKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vUpSlide_Handle_StirKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_IOExti_Handler
</UL>

<P><STRONG><a name="[26]"></a>Bsp_Led_All_Close</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_All_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Led_All_Close &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Console_Mode_Display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>Bsp_Led_BlinkConrol_Handler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, bsp_led.o(i.Bsp_Led_BlinkConrol_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_Led_BlinkConrol_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>Bsp_Led_Console_Mode_Display</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_Console_Mode_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_Led_Console_Mode_Display &rArr; Bsp_Led_All_Close &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_All_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_Led_EnterMotorCalibration_StatusUpdate_Handler &rArr; Bsp_Led_BlinkConrol_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_BlinkConrol_Handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_All_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>Bsp_Led_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Led_Init &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>Bsp_Led_StatusUpdate_Handler</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_StatusUpdate_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bsp_Led_StatusUpdate_Handler &rArr; io_toggle_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>Bsp_Uart_Ble_SendData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_uart.o(i.Bsp_Uart_Ble_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Uart_Ble_SendData &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>Bsp_Uart_Init</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, bsp_uart.o(i.Bsp_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_Uart_Init &rArr; pinmux_uart3_init &rArr; uart_io_cfg &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart3_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart2_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart1_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pull_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>Bsp_Uart_ParameterInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_uart.o(i.Bsp_Uart_ParameterInit))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>Bsp_Uart_RecData_AddPosition</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_uart.o(i.Bsp_Uart_RecData_AddPosition))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>Bsp_Uart_RecData_Handler</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, bsp_uart.o(i.Bsp_Uart_RecData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Uart_RecData_Handler &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>Bsp_Uart_SendFinish_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_uart.o(i.Bsp_Uart_SendFinish_Handler))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>Bsp_Uart_SerialPort1_SendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_uart.o(i.Bsp_Uart_SerialPort1_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Uart_SerialPort1_SendData &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>Bsp_Uart_SerialPort2_SendData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_uart.o(i.Bsp_Uart_SerialPort2_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Uart_SerialPort2_SendData &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>Bsp_Uart_SerialPort3_SendData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_uart.o(i.Bsp_Uart_SerialPort3_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Uart_SerialPort3_SendData &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>Bsp_Power_BatteryUpdate_Handler</STRONG> (Thumb, 694 bytes, Stack size 8 bytes, bsp_power.o(i.Bsp_Power_BatteryUpdate_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Power_BatteryUpdate_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_power.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>Bsp_Power_Electric_Check_Handler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp_power.o(i.Bsp_Power_Electric_Check_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Power_Electric_Check_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_power.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Bsp_Power_IOExti_Close_AdcSampling</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_power.o(i.Bsp_Power_IOExti_Close_AdcSampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bsp_Power_IOExti_Close_AdcSampling &rArr; io_read_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_clr_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_power.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>Bsp_Power_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_power.o(i.Bsp_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bsp_Power_Init &rArr; io_pull_write &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pull_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_config
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_power.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>Bsp_Power_StartingUp_Handler</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, bsp_power.o(i.Bsp_Power_StartingUp_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_Power_StartingUp_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_power.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>Bsp_Power_shutdown_Handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_power.o(i.Bsp_Power_shutdown_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_Power_shutdown_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_power.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>Bsp_Dog_FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_dog.o(i.Bsp_Dog_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Dog_FeedDog &rArr; HAL_IWDG_Refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_dog.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>Bsp_Dog_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_dog.o(i.Bsp_Dog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Dog_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_dog.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>Bsp_Hid_DeviceSendData</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bsp_hid.o(i.Bsp_Hid_DeviceSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Bsp_Hid_DeviceSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_send_keyboard_report
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Hid_VolumeBtn_Control_Photo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_hid.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>Bsp_Hid_VolumeBtn_Control_Photo</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_hid.o(i.Bsp_Hid_VolumeBtn_Control_Photo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Bsp_Hid_VolumeBtn_Control_Photo &rArr; Bsp_Hid_DeviceSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Hid_DeviceSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_hid.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>Bsp_SysTimer_CallBack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_systimer.o(i.Bsp_SysTimer_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Bsp_SysTimer_CallBack &rArr; vSysTimerEvent_SoftwareReset_Handler &rArr; ota_boot_addr_set &rArr; settings_set &rArr; inversion_data_write &rArr; hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_SoftwareReset_Handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_ShutdownStep_Handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_SerialPort_SendData_Handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_SendCheckPtzStatusPackage_Handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_LowPowerShutdown_Handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_LowPowerMode_Handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_DM_Done_Handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_CheckElectric_Handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTimerEvent_AdcEnabledCheck_Handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_systimer.o(i.Bsp_SysTimer_Init)
</UL>
<P><STRONG><a name="[3d]"></a>Bsp_SysTimer_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_systimer.o(i.Bsp_SysTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Bsp_SysTimer_Init &rArr; builtin_timer_create &rArr; linked_buf_alloc &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_create
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_systimer.o(.data)
</UL>
<P><STRONG><a name="[233]"></a>vSysTimerEvent_AdcEnabledCheck_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_AdcEnabledCheck_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vSysTimerEvent_AdcEnabledCheck_Handler &rArr; HAL_ADCEx_InjectedStart_IT &rArr; ADC_Enable &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[230]"></a>vSysTimerEvent_CheckElectric_Handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_CheckElectric_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSysTimerEvent_CheckElectric_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[231]"></a>vSysTimerEvent_DM_Done_Handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bsp_systimer.o(i.vSysTimerEvent_DM_Done_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vSysTimerEvent_DM_Done_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[235]"></a>vSysTimerEvent_LowPowerMode_Handler</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_LowPowerMode_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vSysTimerEvent_LowPowerMode_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[236]"></a>vSysTimerEvent_LowPowerShutdown_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_LowPowerShutdown_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSysTimerEvent_LowPowerShutdown_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[234]"></a>vSysTimerEvent_SendCheckPtzStatusPackage_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_SendCheckPtzStatusPackage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSysTimerEvent_SendCheckPtzStatusPackage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[232]"></a>vSysTimerEvent_SerialPort_SendData_Handler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_SerialPort_SendData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vSysTimerEvent_SerialPort_SendData_Handler &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[22f]"></a>vSysTimerEvent_ShutdownStep_Handler</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_ShutdownStep_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vSysTimerEvent_ShutdownStep_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read_pin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_clr_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[22e]"></a>vSysTimerEvent_SoftwareReset_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_systimer.o(i.vSysTimerEvent_SoftwareReset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = vSysTimerEvent_SoftwareReset_Handler &rArr; ota_boot_addr_set &rArr; settings_set &rArr; inversion_data_write &rArr; hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_boot_addr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTimer_CallBack
</UL>

<P><STRONG><a name="[222]"></a>Bsp_NewProtocol_CRC_Calculate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_NewProtocol_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_SendPackage
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_GetPackageInfo
</UL>

<P><STRONG><a name="[220]"></a>Bsp_NewProtocol_ClearParsedPackage</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_ClearParsedPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_NewProtocol_ClearParsedPackage
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_RxDataParse_Handler
</UL>

<P><STRONG><a name="[221]"></a>Bsp_NewProtocol_GetPackageInfo</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_GetPackageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Bsp_NewProtocol_GetPackageInfo &rArr; Bsp_NewProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_RxDataParse_Handler
</UL>

<P><STRONG><a name="[223]"></a>Bsp_NewProtocol_ParsedSuccess_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_ParsedSuccess_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_NewProtocol_ParsedSuccess_Handler &rArr; Bsp_NewProtocol_SyntheticData_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_SyntheticData_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_RxDataParse_Handler
</UL>

<P><STRONG><a name="[3e]"></a>Bsp_NewProtocol_RxDataParse_Handler</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_RxDataParse_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_NewProtocol_RxDataParse_Handler &rArr; Bsp_NewProtocol_GetPackageInfo &rArr; Bsp_NewProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_ParsedSuccess_Handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_GetPackageInfo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_ClearParsedPackage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_newprotocol.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Bsp_NewProtocol_SendPackage</STRONG> (Thumb, 184 bytes, Stack size 176 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_SendPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bsp_NewProtocol_SendPackage &rArr; Bsp_NewProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_CRC_Calculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_newprotocol.o(.data)
</UL>
<P><STRONG><a name="[224]"></a>Bsp_NewProtocol_SyntheticData_Handler</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, bsp_newprotocol.o(i.Bsp_NewProtocol_SyntheticData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_NewProtocol_SyntheticData_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_NewProtocol_ParsedSuccess_Handler
</UL>

<P><STRONG><a name="[225]"></a>Bsp_OldProtocol_AiGestureData_Handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_AiGestureData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Bsp_OldProtocol_AiGestureData_Handler &rArr; Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SendPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ParsedSuccess_Handler
</UL>

<P><STRONG><a name="[22b]"></a>Bsp_OldProtocol_CRC_Calculate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SendPackage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_GetPackageInfo
</UL>

<P><STRONG><a name="[226]"></a>Bsp_OldProtocol_ChangeModeData_Handler</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_ChangeModeData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_OldProtocol_ChangeModeData_Handler &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ParsedSuccess_Handler
</UL>

<P><STRONG><a name="[227]"></a>Bsp_OldProtocol_ClearParsedPackage</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_ClearParsedPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_OldProtocol_ClearParsedPackage
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_RxDataParse_Handler
</UL>

<P><STRONG><a name="[228]"></a>Bsp_OldProtocol_CmdProtocolSwich_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_CmdProtocolSwich_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Bsp_OldProtocol_CmdProtocolSwich_Handler &rArr; Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SendPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SyntheticData_Handler
</UL>

<P><STRONG><a name="[229]"></a>Bsp_OldProtocol_CmdVersionCheck_Handler</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_CmdVersionCheck_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Bsp_OldProtocol_CmdVersionCheck_Handler &rArr; Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SendPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SyntheticData_Handler
</UL>

<P><STRONG><a name="[22a]"></a>Bsp_OldProtocol_GetPackageInfo</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_GetPackageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_OldProtocol_GetPackageInfo &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_RxDataParse_Handler
</UL>

<P><STRONG><a name="[22c]"></a>Bsp_OldProtocol_ParsedSuccess_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_ParsedSuccess_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Bsp_OldProtocol_ParsedSuccess_Handler &rArr; Bsp_OldProtocol_SyntheticData_Handler &rArr; Bsp_OldProtocol_CmdVersionCheck_Handler &rArr; Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SyntheticData_Handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ChangeModeData_Handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_AiGestureData_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_RxDataParse_Handler
</UL>

<P><STRONG><a name="[40]"></a>Bsp_OldProtocol_RxDataParse_Handler</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_RxDataParse_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Bsp_OldProtocol_RxDataParse_Handler &rArr; Bsp_OldProtocol_ParsedSuccess_Handler &rArr; Bsp_OldProtocol_SyntheticData_Handler &rArr; Bsp_OldProtocol_CmdVersionCheck_Handler &rArr; Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ParsedSuccess_Handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_GetPackageInfo
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ClearParsedPackage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_oldprotocol.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>Bsp_OldProtocol_SendPackage</STRONG> (Thumb, 184 bytes, Stack size 176 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_SendPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SyntheticData_Handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_CmdVersionCheck_Handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_CmdProtocolSwich_Handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_AiGestureData_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_oldprotocol.o(.data)
</UL>
<P><STRONG><a name="[22d]"></a>Bsp_OldProtocol_SyntheticData_Handler</STRONG> (Thumb, 750 bytes, Stack size 24 bytes, bsp_oldprotocol.o(i.Bsp_OldProtocol_SyntheticData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Bsp_OldProtocol_SyntheticData_Handler &rArr; Bsp_OldProtocol_CmdVersionCheck_Handler &rArr; Bsp_OldProtocol_SendPackage &rArr; Bsp_OldProtocol_CRC_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_SendPackage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_CmdVersionCheck_Handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_CmdProtocolSwich_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_OldProtocol_ParsedSuccess_Handler
</UL>

<P><STRONG><a name="[63]"></a>adc_isenable_poll</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ls_hal_adc.o(i.adc_isenable_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_isenable_poll
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ls_hal_adc.o(i.ADC_ConversionStop_Disable)
<LI> ls_hal_adc.o(i.ADC_Enable)
</UL>
<P><STRONG><a name="[254]"></a>calc_done_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.calc_done_wait))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_PointMult
</UL>

<P><STRONG><a name="[253]"></a>calc_fsm_run</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.calc_fsm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calc_fsm_run &rArr; zaddu &rArr; mont_in_data &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zaddu
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zaddc_calc
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zacau_loop
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orig2mont
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont2rslt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dblu
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSECC_IRQHandler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_PointMult
</UL>

<P><STRONG><a name="[252]"></a>calc_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ls_hal_ecc.o(i.calc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calc_init &rArr; p_in &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_in
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_PointMult
</UL>

<P><STRONG><a name="[2be]"></a>copy_from_eccram</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, ls_hal_ecc.o(i.copy_from_eccram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = copy_from_eccram &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result2buffer
</UL>

<P><STRONG><a name="[2b2]"></a>dblu</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.dblu))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[2fb]"></a>h_in</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.h_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = h_in &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orig2mont
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion
</UL>

<P><STRONG><a name="[2b5]"></a>inversion</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.inversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inversion &rArr; inversion_calc &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_out
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_in
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_calc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_in
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[30e]"></a>inversion_calc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.inversion_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inversion_calc &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion
</UL>

<P><STRONG><a name="[2b7]"></a>mont2rslt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.mont2rslt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mont2rslt
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_out
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[30f]"></a>mont_in</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.mont_in))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_in_data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion
</UL>

<P><STRONG><a name="[337]"></a>mont_in_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ls_hal_ecc.o(i.mont_in_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mont_in_data &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_in
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zaddu
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orig2mont
</UL>

<P><STRONG><a name="[30d]"></a>mont_out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.mont_out))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont2rslt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion
</UL>

<P><STRONG><a name="[2b1]"></a>orig2mont</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.orig2mont))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = orig2mont &rArr; mont_in_data &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_in_data
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_in
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[2b8]"></a>p_in</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.p_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p_in &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_init
</UL>

<P><STRONG><a name="[255]"></a>result2buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.result2buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = result2buffer &rArr; copy_from_eccram &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_eccram
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSECC_IRQHandler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LSECC_PointMult
</UL>

<P><STRONG><a name="[377]"></a>zacau_calc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.zacau_calc))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zacau_loop
</UL>

<P><STRONG><a name="[2b3]"></a>zacau_loop</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ls_hal_ecc.o(i.zacau_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zacau_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zacau_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[2b4]"></a>zaddc_calc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.zaddc_calc))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[2b6]"></a>zaddu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ls_hal_ecc.o(i.zaddu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = zaddu &rArr; mont_in_data &rArr; memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zaddu_calc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_in_data
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fsm_run
</UL>

<P><STRONG><a name="[378]"></a>zaddu_calc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ls_hal_ecc.o(i.zaddu_calc))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zaddu
</UL>

<P><STRONG><a name="[396]"></a>hal_flash_write_status_check</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ls_hal_flash.o(.xip_banned.hal_flash_write_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_in_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writing_critical
</UL>

<P><STRONG><a name="[39b]"></a>quad_io_read_dummy</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ls_hal_flash_qspi.o(.xip_banned.quad_io_read_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_data
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_ram_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[2ff]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ls_hal_flash_svcall.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_security_area_operation
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_reg_operation
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_program_operation
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_operation
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_operation
</UL>

<P><STRONG><a name="[3a2]"></a>lsqspi_operation_wait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ls_hal_qspi.o(.xip_banned.lsqspi_operation_wait))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_send_command
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_write_start
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_write_continue
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_read_start
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_read_continue
</UL>

<P><STRONG><a name="[3a5]"></a>memcpy_ram</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ls_hal_qspi.o(.xip_banned.memcpy_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpy_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_write_start
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_read_start
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stig_read_continue
</UL>

<P><STRONG><a name="[3a1]"></a>stig_rd_wr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ls_hal_qspi.o(.xip_banned.stig_rd_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_write_data
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_stig_read_data
</UL>

<P><STRONG><a name="[8]"></a>stig_read_continue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ls_hal_qspi.o(.xip_banned.stig_read_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stig_read_continue &rArr; memcpy_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_ram
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_operation_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_qspi.o(.xip_banned.lsqspi_stig_read_data)
</UL>
<P><STRONG><a name="[9]"></a>stig_read_start</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ls_hal_qspi.o(.xip_banned.stig_read_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stig_read_start &rArr; memcpy_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_ram
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_operation_wait
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ls_hal_qspi.o(.xip_banned.lsqspi_stig_read_data)
<LI> ls_hal_qspi.o(.xip_banned.stig_rd_wr)
</UL>
<P><STRONG><a name="[a]"></a>stig_write_continue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ls_hal_qspi.o(.xip_banned.stig_write_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stig_write_continue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_operation_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_qspi.o(.xip_banned.lsqspi_stig_write_data)
</UL>
<P><STRONG><a name="[b]"></a>stig_write_start</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ls_hal_qspi.o(.xip_banned.stig_write_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stig_write_start &rArr; memcpy_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_ram
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsqspi_operation_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ls_hal_qspi.o(.xip_banned.lsqspi_stig_write_data)
</UL>
<P><STRONG><a name="[27a]"></a>LL_UART_SetRXTL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ls_hal_uart.o(i.LL_UART_SetRXTL))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[28c]"></a>UART_AutoBaudRate_Detect_End</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ls_hal_uart.o(i.UART_AutoBaudRate_Detect_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AutoBaudRate_Detect_End
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRate_Detect_IT
</UL>

<P><STRONG><a name="[27d]"></a>UART_BaudRate_Detect_IT</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ls_hal_uart.o(i.UART_BaudRate_Detect_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_BaudRate_Detect_IT &rArr; UART_AutoBaudRate_Detect_End
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_BaudRateDetectCpltCallback
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AutoBaudRate_Detect_End
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[27e]"></a>UART_Receive_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ls_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_SetRXTL
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[275]"></a>UART_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ls_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[27c]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ls_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Transmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[2f4]"></a>get_ota_boot_addr_info</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ota_settings.o(i.get_ota_boot_addr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_ota_boot_addr_info &rArr; get_ota_settings_offset &rArr; hal_flash_total_size_get &rArr; hal_flash_read_id &rArr; hal_flash_read_reg_operation &rArr; do_hal_flash_read_reg &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_settings_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_boot_addr_set
</UL>

<P><STRONG><a name="[29c]"></a>_settings_get</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, inflash_settings.o(i._settings_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _settings_get &rArr; hal_flash_multi_io_read &rArr; hal_flash_quad_io_read &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_read
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;not_programmed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
</UL>

<P><STRONG><a name="[30c]"></a>invalid_flag_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, inflash_settings.o(i.invalid_flag_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = invalid_flag_write &rArr; hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_page_program
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
</UL>

<P><STRONG><a name="[29e]"></a>inversion_data_check</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, inflash_settings.o(i.inversion_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inversion_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_settings_get
</UL>

<P><STRONG><a name="[310]"></a>inversion_data_write</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, inflash_settings.o(i.inversion_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inversion_data_write &rArr; hal_flash_multi_io_page_program &rArr; hal_flash_quad_page_program &rArr; hal_flash_program_operation &rArr; do_hal_flash_program &rArr; flash_writing_critical &rArr; hal_flash_write_status_check &rArr; hal_flash_write_in_process &rArr; hal_flash_read_status_register_0 &rArr; lsqspi_stig_read_register &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_multi_io_page_program
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_set
</UL>

<P><STRONG><a name="[29d]"></a>not_programmed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, inflash_settings.o(i.not_programmed))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_settings_get
</UL>

<P><STRONG><a name="[319]"></a>linked_buf_hdl_sanity_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, linked_buffer.o(i.linked_buf_hdl_sanity_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linked_buf_hdl_sanity_check
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_release
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_contain_element
</UL>

<P><STRONG><a name="[2bc]"></a>ROTR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(i.ROTR), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
</UL>

<P><STRONG><a name="[2bb]"></a>compress</STRONG> (Thumb, 602 bytes, Stack size 144 bytes, sha256.o(i.compress), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROTR
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_update
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_final
</UL>

<P><STRONG><a name="[369]"></a>all_section_empty</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tinyfs.o(i.all_section_empty))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[2c3]"></a>data_write_through</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tinyfs.o(i.data_write_through))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_write_through &rArr; tinyfs_nvm_write_through
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_write_through
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write_through
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_garbage_collection
</UL>

<P><STRONG><a name="[99]"></a>dir_add_parse</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, tinyfs.o(i.dir_add_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dir_add_parse &rArr; node_search &rArr; node_list_search &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_search
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs.o(.constdata)
</UL>
<P><STRONG><a name="[2d0]"></a>dir_add_write</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tinyfs.o(i.dir_add_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = dir_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
</UL>

<P><STRONG><a name="[7d]"></a>dir_compare</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, tinyfs.o(i.dir_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dir_compare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tinyfs.o(i.dir_add_parse)
<LI> tinyfs.o(i.dir_remove_parse)
</UL>
<P><STRONG><a name="[9b]"></a>dir_remove_parse</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tinyfs.o(i.dir_remove_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_remove_parse &rArr; node_search &rArr; node_list_search &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_search
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs.o(.constdata)
</UL>
<P><STRONG><a name="[2d3]"></a>dir_remove_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tinyfs.o(i.dir_remove_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dir_remove_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_del
</UL>

<P><STRONG><a name="[2d4]"></a>dir_tree_build</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tinyfs.o(i.dir_tree_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_tree_build &rArr; sibling_sort &rArr; sorted_list_insert &rArr; insert_check &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sibling_sort
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_sibling_fix
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_parent_fix
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_link
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[2d7]"></a>dir_tree_link</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tinyfs.o(i.dir_tree_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = dir_tree_link &rArr;  dir_tree_link (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_link
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_link
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_build
</UL>

<P><STRONG><a name="[2dd]"></a>do_tinyfs_del_record</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tinyfs.o(i.do_tinyfs_del_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = do_tinyfs_del_record &rArr; node_del &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_del
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_del_record
</UL>

<P><STRONG><a name="[2e0]"></a>do_tinyfs_read</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, tinyfs.o(i.do_tinyfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_data_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
</UL>

<P><STRONG><a name="[2e2]"></a>do_tinyfs_write</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tinyfs.o(i.do_tinyfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
</UL>

<P><STRONG><a name="[2e5]"></a>find_head_tail_section</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, tinyfs.o(i.find_head_tail_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = find_head_tail_section &rArr; get_first_valid_section &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_valid_section
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_valid_section
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[2e9]"></a>garbage_collect_try</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tinyfs.o(i.garbage_collect_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_garbage_collection
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prev_section
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_section
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write_through
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_del
</UL>

<P><STRONG><a name="[2ed]"></a>gc_section_find</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tinyfs.o(i.gc_section_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_section_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_data_in_section
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_section
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[2f1]"></a>get_child_dir_by_name</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tinyfs.o(i.get_child_dir_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_child_dir_by_name &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
</UL>

<P><STRONG><a name="[2e6]"></a>get_first_valid_section</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tinyfs.o(i.get_first_valid_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_first_valid_section &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_head_tail_section
</UL>

<P><STRONG><a name="[2ea]"></a>get_next_section</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tinyfs.o(i.get_next_section))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_offset_calc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_read_node
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_valid_section
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_section_find
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
</UL>

<P><STRONG><a name="[2e7]"></a>get_next_valid_section</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tinyfs.o(i.get_next_valid_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_valid_section
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_section
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodes_info_load
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_head_tail_section
</UL>

<P><STRONG><a name="[2eb]"></a>get_prev_section</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tinyfs.o(i.get_prev_section))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
</UL>

<P><STRONG><a name="[2de]"></a>get_record_by_name</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tinyfs.o(i.get_record_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_record_by_name &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_record_exist
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_del_record
</UL>

<P><STRONG><a name="[309]"></a>if_dir_exist</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tinyfs.o(i.if_dir_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = if_dir_exist &rArr; linked_buf_contain_element &rArr; linked_buf_get_ref_cnt_by_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_contain_element
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_record_exist
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_del_record
</UL>

<P><STRONG><a name="[30b]"></a>insert_check</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tinyfs.o(i.insert_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = insert_check &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sorted_list_insert
</UL>

<P><STRONG><a name="[2ce]"></a>node_alloc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tinyfs.o(i.node_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = node_alloc &rArr; linked_buf_alloc &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_parse
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_parse
</UL>

<P><STRONG><a name="[338]"></a>node_copy</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tinyfs.o(i.node_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_copy
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_write
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_write
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_list_copy
</UL>

<P><STRONG><a name="[33b]"></a>node_crc_check</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, tinyfs.o(i.node_crc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = node_crc_check &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_offset_calc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_read_node
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_metadata_read
</UL>

<P><STRONG><a name="[2e1]"></a>node_data_read</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tinyfs.o(i.node_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_offset_calc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_read_node
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_read
</UL>

<P><STRONG><a name="[2df]"></a>node_del</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tinyfs.o(i.node_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = node_del &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_remove_write
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_del_record
</UL>

<P><STRONG><a name="[2d2]"></a>node_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tinyfs.o(i.node_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = node_free &rArr; linked_buf_release &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_remove_parse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_del
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove_parse
</UL>

<P><STRONG><a name="[2da]"></a>node_idx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tinyfs.o(i.node_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = node_idx &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_tree
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_sibling_fix
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_parent_fix
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_link
</UL>

<P><STRONG><a name="[33f]"></a>node_list_copy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tinyfs.o(i.node_list_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_copy
</UL>

<P><STRONG><a name="[36c]"></a>node_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tinyfs.o(i.node_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_init
</UL>

<P><STRONG><a name="[340]"></a>node_list_search</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tinyfs.o(i.node_list_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = node_list_search &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_search
</UL>

<P><STRONG><a name="[341]"></a>node_metadata_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tinyfs.o(i.node_metadata_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = node_metadata_read &rArr; node_crc_check &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_read_node
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_crc_check
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodes_info_load
</UL>

<P><STRONG><a name="[2d9]"></a>node_parent_fix</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tinyfs.o(i.node_parent_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = node_parent_fix &rArr;  node_parent_fix (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_parent_fix
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_parent_fix
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_build
</UL>

<P><STRONG><a name="[2d6]"></a>node_ptr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tinyfs.o(i.node_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_get_elem_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sorted_list_insert
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_sibling_fix
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_parent_fix
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_list_search
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_list_copy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record_by_name
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child_dir_by_name
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_link
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_build
</UL>

<P><STRONG><a name="[2d8]"></a>node_sibling_fix</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tinyfs.o(i.node_sibling_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = node_sibling_fix &rArr; node_idx &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_build
</UL>

<P><STRONG><a name="[36b]"></a>node_total_length</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tinyfs.o(i.node_total_length))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
</UL>

<P><STRONG><a name="[2d1]"></a>node_write</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, tinyfs.o(i.node_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_program
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_data_in_section
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_section_erase
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_write
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_section
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_remove_write
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_write
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_copy
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_write
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove_write
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_write
</UL>

<P><STRONG><a name="[345]"></a>nodes_info_load</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, tinyfs.o(i.nodes_info_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nodes_info_load &rArr; nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_page_empty
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_metadata_read
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_valid_section
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[346]"></a>nvm_page_empty</STRONG> (Thumb, 90 bytes, Stack size 280 bytes, tinyfs.o(i.nvm_page_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_read_with_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodes_info_load
</UL>

<P><STRONG><a name="[33d]"></a>nvm_read_node</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tinyfs.o(i.nvm_read_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_read_with_cache
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_section
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_copy
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_metadata_read
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_data_read
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_crc_check
</UL>

<P><STRONG><a name="[98]"></a>record_add_parse</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tinyfs.o(i.record_add_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_add_parse &rArr; node_search &rArr; node_list_search &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_search
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs.o(.constdata)
</UL>
<P><STRONG><a name="[339]"></a>record_add_write</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, tinyfs.o(i.record_add_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
</UL>

<P><STRONG><a name="[8c]"></a>record_compare</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tinyfs.o(i.record_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_compare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tinyfs.o(i.record_add_parse)
<LI> tinyfs.o(i.record_remove_parse)
</UL>
<P><STRONG><a name="[33a]"></a>record_data_copy</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tinyfs.o(i.record_data_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = record_data_copy &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_offset_calc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_read_node
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
</UL>

<P><STRONG><a name="[350]"></a>record_data_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tinyfs.o(i.record_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = record_data_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write
</UL>

<P><STRONG><a name="[9a]"></a>record_remove_parse</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tinyfs.o(i.record_remove_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = record_remove_parse &rArr; node_search &rArr; node_list_search &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_search
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_del
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyfs.o(.constdata)
</UL>
<P><STRONG><a name="[33e]"></a>record_remove_write</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tinyfs.o(i.record_remove_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = record_remove_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_del
</UL>

<P><STRONG><a name="[2e3]"></a>record_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, tinyfs.o(i.record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_list_push
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_write
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_write
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
</UL>

<P><STRONG><a name="[367]"></a>root_dir_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tinyfs.o(i.root_dir_init))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[351]"></a>section_copy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tinyfs.o(i.section_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_list_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_garbage_collection
</UL>

<P><STRONG><a name="[2ec]"></a>section_garbage_collection</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tinyfs.o(i.section_garbage_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_copy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_write_through
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collect_try
</UL>

<P><STRONG><a name="[352]"></a>section_head_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tinyfs.o(i.section_head_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = section_head_read &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_read_with_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_read_all
</UL>

<P><STRONG><a name="[353]"></a>section_head_read_all</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, tinyfs.o(i.section_head_read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = section_head_read_all &rArr; section_head_read &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;section_head_read
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[343]"></a>section_head_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tinyfs.o(i.section_head_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_nvm_program
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>

<P><STRONG><a name="[33c]"></a>section_offset_calc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tinyfs.o(i.section_offset_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = section_offset_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_section
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data_copy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_data_read
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_crc_check
</UL>

<P><STRONG><a name="[2d5]"></a>sibling_sort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tinyfs.o(i.sibling_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sibling_sort &rArr; sorted_list_insert &rArr; insert_check &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sorted_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_tree_build
</UL>

<P><STRONG><a name="[354]"></a>sorted_list_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tinyfs.o(i.sorted_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sorted_list_insert &rArr; insert_check &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sibling_sort
</UL>

<P><STRONG><a name="[2cd]"></a>tinyfs_list_del</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tinyfs.o(i.tinyfs_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tinyfs_list_del &rArr; node_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_total_length
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_remove_parse
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_parse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_del
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tinyfs_write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove_parse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_parse
</UL>

<P><STRONG><a name="[368]"></a>tinyfs_list_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tinyfs.o(i.tinyfs_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tinyfs_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[2cf]"></a>tinyfs_list_push</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tinyfs.o(i.tinyfs_list_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tinyfs_list_push &rArr; node_idx &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_total_length
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_ptr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_add_parse
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_copy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_add_parse
</UL>

<P><STRONG><a name="[36a]"></a>tinyfs_mutex_create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tinyfs.o(i.tinyfs_mutex_create))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
</UL>

<P><STRONG><a name="[365]"></a>tinyfs_mutex_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tinyfs.o(i.tinyfs_mutex_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write_through
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_record_exist
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_del_record
</UL>

<P><STRONG><a name="[366]"></a>tinyfs_mutex_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tinyfs.o(i.tinyfs_mutex_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write_through
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_mkdir
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_record_exist
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_del_record
</UL>

<P><STRONG><a name="[342]"></a>tinyfs_section_erase</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tinyfs.o(i.tinyfs_section_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tinyfs_section_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
</UL>

<P><STRONG><a name="[2ee]"></a>valid_data_in_section</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tinyfs.o(i.valid_data_in_section))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_section_find
</UL>

<P><STRONG><a name="[248]"></a>adc_msp_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ls_msp_adc.o(i.adc_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MSP_Init
</UL>

<P><STRONG><a name="[2a0]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ls_msp_timer.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimc_msp_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimb_msp_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptima_msp_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bstim_msp_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adtim_msp_init
</UL>

<P><STRONG><a name="[2a1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ls_msp_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimc_msp_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimb_msp_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptima_msp_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bstim_msp_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adtim_msp_init
</UL>

<P><STRONG><a name="[269]"></a>adtim_msp_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ls_msp_timer.o(i.adtim_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adtim_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Init
</UL>

<P><STRONG><a name="[265]"></a>bstim_msp_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ls_msp_timer.o(i.bstim_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bstim_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Init
</UL>

<P><STRONG><a name="[266]"></a>gptima_msp_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ls_msp_timer.o(i.gptima_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gptima_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Init
</UL>

<P><STRONG><a name="[267]"></a>gptimb_msp_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ls_msp_timer.o(i.gptimb_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gptimb_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Init
</UL>

<P><STRONG><a name="[268]"></a>gptimc_msp_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ls_msp_timer.o(i.gptimc_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gptimc_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Init
</UL>

<P><STRONG><a name="[264]"></a>timer_status_set</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ls_msp_timer.o(i.timer_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimerc1_status_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimerb1_status_set
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimera1_status_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bstimer1_status_set
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adtimer1_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MSP_Busy_Set
</UL>

<P><STRONG><a name="[36f]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ls_msp_uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_msp_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_msp_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_msp_init
</UL>

<P><STRONG><a name="[370]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ls_msp_uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_msp_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_msp_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_msp_init
</UL>

<P><STRONG><a name="[277]"></a>uart1_msp_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ls_msp_uart.o(i.uart1_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart1_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Init
</UL>

<P><STRONG><a name="[278]"></a>uart2_msp_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ls_msp_uart.o(i.uart2_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart2_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Init
</UL>

<P><STRONG><a name="[279]"></a>uart3_msp_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ls_msp_uart.o(i.uart3_msp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart3_msp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Init
</UL>

<P><STRONG><a name="[276]"></a>uart_status_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ls_msp_uart.o(i.uart_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_status_set
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_status_set
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_status_set
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
</UL>

<P><STRONG><a name="[23c]"></a>exti_io_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.exti_io_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exti_io_handler &rArr; io_exti_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_callback
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_wkup_en_clr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Handler
</UL>

<P><STRONG><a name="[2fa]"></a>gpio_ana_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.gpio_ana_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_ana_init &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_ana_func1_init
</UL>

<P><STRONG><a name="[34c]"></a>timer_ch_io_cfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.timer_ch_io_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer_ch_io_cfg &rArr; timer_ch_io_output_cfg &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_output_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gptima1_ch2_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gptima1_ch1_init
</UL>

<P><STRONG><a name="[360]"></a>timer_ch_io_output_cfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.timer_ch_io_output_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_ch_io_output_cfg &rArr; io_write_pin &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ch_io_cfg
</UL>

<P><STRONG><a name="[34d]"></a>uart_io_cfg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ls_soc_gpio.o(i.uart_io_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_io_cfg &rArr; io_set_pin &rArr; GPIO_GetPort &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart3_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart2_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart1_init
</UL>

<P><STRONG><a name="[32a]"></a>BPF_CAL</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.BPF_CAL))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
</UL>

<P><STRONG><a name="[32d]"></a>modem_reg_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.modem_reg_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_reinit
</UL>

<P><STRONG><a name="[32b]"></a>pll_cal_testreg_deinit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.pll_cal_testreg_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
</UL>

<P><STRONG><a name="[329]"></a>pll_cal_testreg_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.pll_cal_testreg_init))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
</UL>

<P><STRONG><a name="[32c]"></a>rf_reg_init</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rf_reg_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_reinit
</UL>

<P><STRONG><a name="[328]"></a>rf_reg_retention</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, modem_rf_le501x.o(i.rf_reg_retention))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
</UL>

<P><STRONG><a name="[32e]"></a>tx_pwr_config</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, modem_rf_le501x.o(i.tx_pwr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tx_pwr_config &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_reinit
</UL>

<P><STRONG><a name="[389]"></a>switch_to_pll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, platform.o(.xip_banned.switch_to_pll))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_switch
</UL>

<P><STRONG><a name="[8b]"></a>GPTIM_IRQ_Handler_For_LSI_Counting</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, platform.o(i.GPTIM_IRQ_Handler_For_LSI_Counting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GPTIM_IRQ_Handler_For_LSI_Counting
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptimerb1_status_set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.rco_freq_counting_init)
</UL>
<P><STRONG><a name="[325]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, platform.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_start
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd33_irq_enable
</UL>

<P><STRONG><a name="[326]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, platform.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_start
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd33_irq_enable
</UL>

<P><STRONG><a name="[316]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, platform.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_priority
</UL>

<P><STRONG><a name="[2a2]"></a>analog_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, platform.o(i.analog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = analog_init &rArr; clk_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_set_int_isr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_on (via Veneer)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lse_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_switch (via Veneer)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_check (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_calib
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_app
</UL>

<P><STRONG><a name="[375]"></a>bb_mem_clr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.bb_mem_clr))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
</UL>

<P><STRONG><a name="[2a8]"></a>ble_irq_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform.o(i.ble_irq_clr))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clr_and_enable
</UL>

<P><STRONG><a name="[2a9]"></a>ble_irq_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform.o(i.ble_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clr_and_enable
</UL>

<P><STRONG><a name="[2e8]"></a>flash_data_storage_base_offset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, platform.o(i.flash_data_storage_base_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = flash_data_storage_base_offset &rArr; config_word_get &rArr; hal_flash_quad_io_read &rArr; hal_flash_read_operation &rArr; do_hal_flash_read &rArr; flash_reading_critical &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_word_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[314]"></a>irq_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform.o(i.irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_init &rArr; irq_reinit &rArr; irq_priority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_reinit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_irq_clr_and_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[315]"></a>irq_priority</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, platform.o(i.irq_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = irq_priority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_reinit
</UL>

<P><STRONG><a name="[2a7]"></a>lsi_calib</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, platform.o(i.lsi_calib))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_init
</UL>

<P><STRONG><a name="[88]"></a>lsi_counting_timer_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, platform.o(i.lsi_counting_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lsi_counting_timer_callback &rArr; rco_freq_counting_start &rArr; HAL_PIS_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.lsi_counting_timer_create)
</UL>
<P><STRONG><a name="[6c]"></a>lsi_counting_timer_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, platform.o(i.lsi_counting_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lsi_counting_timer_start &rArr; builtin_timer_start &rArr; linked_buf_get_elem_idx &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.GPTIM_IRQ_Handler_For_LSI_Counting)
</UL>
<P><STRONG><a name="[317]"></a>lvd33_irq_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform.o(i.lvd33_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lvd33_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_reinit
</UL>

<P><STRONG><a name="[334]"></a>mac_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, platform.o(i.mac_init))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[32f]"></a>module_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, platform.o(i.module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = module_init &rArr; tinyfs_init &rArr; nodes_info_load &rArr; nvm_page_empty &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PIS_Init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linked_buf_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_log_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_acc_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_print_dir_tree
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinyfs_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_start
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_freq_counting_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsi_counting_timer_create
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trng_value
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_process
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_recover_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_storage_base_offset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_rf_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_env_register
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_app
</UL>

<P><STRONG><a name="[358]"></a>stack_data_bss_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform.o(i.stack_data_bss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stack_data_bss_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
</UL>

<P><STRONG><a name="[35e]"></a>var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, platform.o(i.var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = var_init &rArr; hal_flash_drv_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_drv_var_init (via Veneer)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_var_ptr_init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_data_bss_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_mem_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_app
</UL>

<P><STRONG><a name="[284]"></a>__NVIC_GetPendingIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sleep.o(.xip_banned.__NVIC_GetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPWKUP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[388]"></a>ble_hclk_clr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sleep.o(.xip_banned.ble_hclk_clr))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
</UL>

<P><STRONG><a name="[2c7]"></a>cpu_flash_deep_sleep_and_recover</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sleep.o(.xip_banned.cpu_flash_deep_sleep_and_recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cpu_flash_deep_sleep_and_recover &rArr; hal_flash_xip_start &rArr; quad_io_read_dummy &rArr; lsqspi_stig_read_data &rArr; stig_rd_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_release_from_deep_power_down
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_deep_power_down
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_up_hardware_modules
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_down_hardware_modules
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep (via Veneer)
</UL>

<P><STRONG><a name="[383]"></a>normal_sleep_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep.o(.xip_banned.normal_sleep_set))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_set
</UL>

<P><STRONG><a name="[38b]"></a>power_down_hardware_modules</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sleep.o(.xip_banned.power_down_hardware_modules))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_flash_deep_sleep_and_recover
</UL>

<P><STRONG><a name="[387]"></a>sleep_mode_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sleep.o(.xip_banned.sleep_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleep_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal_sleep_set
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
</UL>

<P><STRONG><a name="[384]"></a>wait_dpll_lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sleep.o(.xip_banned.wait_dpll_lock))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
</UL>

<P><STRONG><a name="[2ae]"></a>ble_hclk_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sleep.o(i.ble_hclk_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radio_en_sync
</UL>

<P><STRONG><a name="[2ad]"></a>ble_radio_en_sync</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sleep.o(i.ble_radio_en_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_radio_en_sync &rArr; ls_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ble_wkup_req
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hclk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
</UL>

<P><STRONG><a name="[2af]"></a>clr_ble_wkup_req</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sleep.o(i.clr_ble_wkup_req))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radio_en_sync
</UL>

<P><STRONG><a name="[282]"></a>exti_int_pending</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sleep.o(i.exti_int_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_int_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPWKUP_Handler
</UL>

<P><STRONG><a name="[2c8]"></a>wkup_ble</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sleep.o(i.wkup_ble))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep
</UL>

<P><STRONG><a name="[8a]"></a>dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stack_var.o(i.dummy))
<BR>[Address Reference Count : 1]<UL><LI> stack_var.o(i.main_task_app_init)
</UL>
<P><STRONG><a name="[6]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.xip_banned))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28a]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_PutCharSkip
</UL>

<P><STRONG><a name="[b3]"></a>builtin_func_invoke_handler</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, libfw.o(.text.builtin_func_invoke_handler))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.builtin_msg_handler_tab)
</UL>
<P><STRONG><a name="[b2]"></a>builtin_dynamic_msg_handler</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, libfw.o(.text.builtin_dynamic_msg_handler))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;builtin_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.builtin_msg_handler_tab)
</UL>
<P><STRONG><a name="[a7]"></a>app_msg_handler</STRONG> (Thumb, 772 bytes, Stack size unknown bytes, libfw.o(.text.app_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = app_msg_handler &rArr; gap_manager_gapc_bond_ind_handler &rArr; ble_storage_alloc_peer_id &rArr; nvds_put &rArr; tinyfs_write &rArr; do_tinyfs_write &rArr; record_write &rArr; garbage_collect_try &rArr; section_garbage_collection &rArr; section_copy &rArr; node_list_copy &rArr; node_copy &rArr; record_add_write &rArr; node_write &rArr; section_head_write &rArr; crc16ccitt &rArr; crc16_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_start_activity_cmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_cmp_evt_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_reset_cmp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_get_dev_info_req_ind_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_create_activity_cmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_shi
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_char_desc_ind_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_conn_req_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_delete_activity_cmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_param_updated_ind_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_param_update_req_ind_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_profile_added_ind_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_svc_ind_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_write_req_ind_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_gapm_resolv_addr_cmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_security_ind_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_activity_created_ind_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gattm_add_svc_rsp_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_att_info_req_ind_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_stop_activity_cmp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_ind_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_char_ind_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_event_req_ind_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_dev_config_cmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_le_phy_ind_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_ext_adv_report_ind_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_read_ind_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_encrypt_req_ind_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uhi
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_adv_data_cmp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_scan_request_ind_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_ls_sig_mesh_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_svc_incl_ind_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_cmp_evt_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_read_req_ind_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_scan_rsp_data_cmp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_gapm_addr_solved_ind_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_sqi
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_mtu_exchanged_ind_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_disconnect_ind_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_event_ind_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_activity_stopped_ind_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_get_rssi_ind_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.app_msg_handler_tab)
</UL>
<P><STRONG><a name="[53]"></a>bond_cfm_ltk_fill</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, libfw.o(.text.bond_cfm_ltk_fill))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gap_manager_gapc_bond_req_ind_handler)
</UL>
<P><STRONG><a name="[177]"></a>pair_done_evt</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libfw.o(.text.pair_done_evt))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[58]"></a>bond_cfm_tk_fill</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, libfw.o(.text.bond_cfm_tk_fill))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gap_manager_tk_set)
</UL>
<P><STRONG><a name="[179]"></a>gapc_bond_cfm_send</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.gapc_bond_cfm_send))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_slave_pair_response_send
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_tk_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[56]"></a>bond_search_callback</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, libfw.o(.text.bond_search_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = bond_search_callback &rArr; ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_bonding_info
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_peer_client_info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_peer_server_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gap_manager_gapc_conn_req_ind_handler)
</UL>
<P><STRONG><a name="[54]"></a>bond_cfm_irk_fill</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, libfw.o(.text.bond_cfm_irk_fill))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_bdaddr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_irk
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gap_manager_gapc_bond_req_ind_handler)
</UL>
<P><STRONG><a name="[55]"></a>bond_cfm_csrk_fill</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, libfw.o(.text.bond_cfm_csrk_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = bond_cfm_csrk_fill &rArr; rand_gen_by_word
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand_gen_by_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gap_manager_gapc_bond_req_ind_handler)
</UL>
<P><STRONG><a name="[57]"></a>bond_cfm_pair_feat_fill</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, libfw.o(.text.bond_cfm_pair_feat_fill))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gap_manager_slave_pair_response_send)
</UL>
<P><STRONG><a name="[17c]"></a>passkey_set</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, libfw.o(.text.passkey_set))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_tk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_passkey_input
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_manager_gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[5a]"></a>svc_read_req_callback</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, libfw.o(.text.svc_read_req_callback))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gatt_manager_gattc_read_req_ind_handler)
</UL>
<P><STRONG><a name="[186]"></a>gattc_manager_uuidlen_internal_to_user</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libfw.o(.text.gattc_manager_uuidlen_internal_to_user))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_char_desc_ind_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_svc_ind_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_char_ind_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_disc_svc_incl_ind_handler
</UL>

<P><STRONG><a name="[5b]"></a>svc_write_req_callback</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, libfw.o(.text.svc_write_req_callback))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gatt_manager_gattc_write_req_ind_handler)
</UL>
<P><STRONG><a name="[18c]"></a>gattc_event_cmd_send</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, libfw.o(.text.gattc_event_cmd_send))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_server_send_notification
</UL>

<P><STRONG><a name="[187]"></a>gatt_svc_list_walk_through.isra.0</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, libfw.o(.text.gatt_svc_list_walk_through.isra.0))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_write_req_ind_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_manager_gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[14a]"></a>rpa_resolve_start</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, libfw.o(.text.rpa_resolve_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = rpa_resolve_start &rArr; ble_storage_read_bonding_info &rArr; nvds_get &rArr; tinyfs_read &rArr; do_tinyfs_read &rArr; node_data_read &rArr; nvm_read_node &rArr; tinyfs_nvm_read_with_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_read_bonding_info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_gapm_resolv_addr_cmp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_storage_bonding_info_search_req
</UL>

<P><STRONG><a name="[59]"></a>adv_actv_start_param</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.adv_actv_start_param))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.text.gapm_adv_activity_start_cmd_send)
</UL>
<P><STRONG><a name="[15f]"></a>dev_manager_create_adv_object</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, libfw.o(.text.dev_manager_create_adv_object))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_create_legacy_adv_object
</UL>

<P><STRONG><a name="[184]"></a>gapm_activity_start_cmd_send</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, libfw.o(.text.gapm_activity_start_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = gapm_activity_start_cmd_send &rArr; general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_fifo_put
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_activity_start_cmd_send
</UL>

<P><STRONG><a name="[162]"></a>gapm_adv_activity_start_cmd_send</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, libfw.o(.text.gapm_adv_activity_start_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = gapm_adv_activity_start_cmd_send &rArr; gapm_activity_start_cmd_send &rArr; general_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_start_adv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_adv_data_cmp
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_manager_gapm_set_scan_rsp_data_cmp
</UL>

<P><STRONG><a name="[193]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, libfw.o(.text.gattc_read_req_ind_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_handle_to_value
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>

<P><STRONG><a name="[16e]"></a>fotas_gattc_send_evt_cmd.constprop.0</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, libfw.o(.text.fotas_gattc_send_evt_cmd.constprop.0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[197]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 736 bytes, Stack size unknown bytes, libfw.o(.text.gattc_write_req_ind_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fotas_gattc_send_evt_cmd.constprop.0
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_digest_check
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_segment_to_flash
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>

<P><STRONG><a name="[195]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, libfw.o(.text.gattc_read_req_ind_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>

<P><STRONG><a name="[bc]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, libfw.o(.text.gattc_att_info_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_idx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[be]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, libfw.o(.text.gattc_read_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_idx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[bd]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 476 bytes, Stack size unknown bytes, libfw.o(.text.gattc_write_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_cfg_ind_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_idx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[bb]"></a>hogpd_proto_mode_cfm_handler</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_proto_mode_cfm_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[ba]"></a>hogpd_report_cfm_handler</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_report_cfm_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[b8]"></a>hogpd_enable_req_handler</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_enable_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[b9]"></a>hogpd_report_upd_req_handler</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_report_upd_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_ntf_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[bf]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, libfw.o(.text.gattc_cmp_evt_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_msg_handler_tab)
</UL>
<P><STRONG><a name="[b6]"></a>hogpd_create</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_create))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_itf)
</UL>
<P><STRONG><a name="[b7]"></a>hogpd_cleanup</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_cleanup))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_itf)
</UL>
<P><STRONG><a name="[b5]"></a>hogpd_destroy</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_itf)
</UL>
<P><STRONG><a name="[b4]"></a>hogpd_init</STRONG> (Thumb, 1064 bytes, Stack size unknown bytes, libfw.o(.text.hogpd_init))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_task_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_reserve_handle_range
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hogpd_get_att_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.hogpd_itf)
</UL>
<P><STRONG><a name="[b1]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libfw.o(.text.gattc_cmp_evt_handler))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_msg_handler_tab)
</UL>
<P><STRONG><a name="[b0]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, libfw.o(.text.gattc_read_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_pack_char_pres_fmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_msg_handler_tab)
</UL>
<P><STRONG><a name="[ae]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, libfw.o(.text.gattc_att_info_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_msg_handler_tab)
</UL>
<P><STRONG><a name="[af]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, libfw.o(.text.gattc_write_req_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_msg_handler_tab)
</UL>
<P><STRONG><a name="[ad]"></a>bass_batt_level_upd_req_handler</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, libfw.o(.text.bass_batt_level_upd_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_msg_handler_tab)
</UL>
<P><STRONG><a name="[ac]"></a>bass_enable_req_handler</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, libfw.o(.text.bass_enable_req_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_msg_handler_tab)
</UL>
<P><STRONG><a name="[aa]"></a>bass_create</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.bass_create))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_itf)
</UL>
<P><STRONG><a name="[ab]"></a>bass_cleanup</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libfw.o(.text.bass_cleanup))
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_itf)
</UL>
<P><STRONG><a name="[a9]"></a>bass_destroy</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, libfw.o(.text.bass_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_itf)
</UL>
<P><STRONG><a name="[a8]"></a>bass_init</STRONG> (Thumb, 336 bytes, Stack size unknown bytes, libfw.o(.text.bass_init))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_task_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libfw.o(.rodata.bass_itf)
</UL>
<P><STRONG><a name="[12b]"></a>bass_notify_batt_lvl</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, libfw.o(.text.bass_notify_batt_lvl))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>

<P><STRONG><a name="[190]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, libfw.o(.text.gattc_cmp_evt_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_thumb1_case_uqi
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_check_svc_char_desc_uuid128_validity
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_check_svc_char_uuid128_validity
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_enable_rsp_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancc_cmp_evt_send
</UL>

<P><STRONG><a name="[297]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[293]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[29a]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[299]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[d6]"></a>_fp_value</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[47]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[c3]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
